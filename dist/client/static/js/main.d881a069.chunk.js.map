{"version":3,"sources":["redux/actions/taskActions.ts","redux/types/taskTypes.ts","components/Header.tsx","redux/actions/authActions.ts","redux/types/authTypes.ts","components/TextInput.tsx","components/CrudModal.tsx","lib/api.ts","scenes/Boards.tsx","components/SelectInput.tsx","components/TaskItem.tsx","components/TaskList.tsx","lib/tools.ts","scenes/TaskBoard.tsx","scenes/Login.tsx","components/LoginRoute.tsx","components/ProtectedRoute.tsx","App.tsx","redux/reducers/authReducer.ts","redux/reducers/taskReducer.ts","redux/reducers/index.ts","redux/store.ts","serviceWorker.ts","index.tsx"],"names":["loadBoards","payload","type","Header","state","isOpen","toggle","setState","doLogout","props","logout","this","Navbar","color","light","expand","fixed","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","className","Nav","NavItem","to","activeClassName","exact","React","Component","mapDispatchToProps","connect","loggedIn","auth","TextInput","label","name","value","onChange","showError","errorMessage","FormGroup","Label","Input","invalid","FormFeedback","CrudModal","showDelete","deleteAction","closeModal","closeDelete","modalOpen","modalAction","modalType","submitModal","children","Modal","centered","ModalHeader","ModalBody","ModalFooter","Button","size","apiUrl","fetchApi","endPoint","method","a","data","bodyData","body","JSON","stringify","fetch","headers","Accept","response","json","console","log","status","Boards","boardID","boardName","apiResult","boards","deleteBoard","editBoard","createBoard","id","taskList","addBoard","event","key","currentTarget","openCreateModal","openEditModal","row","actionsFormatter","cell","outline","columns","dataField","text","sort","isDummyField","formatter","headerStyle","width","bootstrap4","keyField","task","SelectInput","selectLabel","options","map","index","TaskItem","editTask","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","isDragging","draggableStyle","position","userSelect","padding","grid","margin","background","boxShadow","border","TaskList","tasks","showEdit","showAddTask","showEditTask","droppableId","isDraggingOver","borderRadius","minWidth","marginRight","marginBottom","droppableProps","placeholder","reorderArray","list","startIndex","endIndex","result","Array","from","splice","removed","moveArray","source","destination","sourceClone","destClone","sourceItems","destinationItems","TaskBoard","listID","listName","taskID","taskName","createTask","editList","createList","deleteList","currentBoard","taskListID","addList","deleteTask","addTask","openCreateTaskModal","openEditTaskModal","onDefaultBoardChange","setCurrentBoard","loadBoard","loadDefaultBoard","board","onDragEnd","taskLists","sourceID","destinationID","sourceIndex","destinationIndex","getTasks","moveTask","sourceList","destinationList","moveResult","filter","getTaskLists","Login","username","password","errorInput","checkLogin","loginSuccess","LoginRoute","ProtectedRoute","App","path","component","undefined","INITIAL_STATE","token","rootReducer","combineReducers","action","persistConfig","storage","persistedReducer","persistReducer","middleware","applyMiddleware","thunk","store","createStore","persistor","persistStore","Boolean","window","location","hostname","match","ReactDOM","render","loading","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d881a069.chunk.js","sourcesContent":["import {\n  LOAD_BOARDS,\n  LOAD_BOARD,\n  ADD_BOARD,\n  EDIT_BOARD,\n  DELETE_BOARD,\n  ADD_LIST,\n  EDIT_LIST,\n  DELETE_LIST,\n  ADD_TASK,\n  EDIT_TASK,\n  DELETE_TASK,\n  MOVE_TASK,\n} from \"../types\";\n\nexport const loadBoards = (payload: any) => {\n  return {\n    type: LOAD_BOARDS,\n    payload,\n  };\n};\n\nexport const loadBoard = (payload: any) => {\n  return {\n    type: LOAD_BOARD,\n    payload,\n  };\n};\n\nexport const addBoard = (payload: any) => {\n  return {\n    type: ADD_BOARD,\n    payload,\n  };\n};\n\nexport const editBoard = (payload: any) => {\n  return {\n    type: EDIT_BOARD,\n    payload,\n  };\n};\n\nexport const deleteBoard = (payload: any) => {\n  return {\n    type: DELETE_BOARD,\n    payload,\n  };\n};\n\nexport const addList = (payload: any) => {\n  return {\n    type: ADD_LIST,\n    payload,\n  };\n};\n\nexport const editList = (payload: any) => {\n  return {\n    type: EDIT_LIST,\n    payload,\n  };\n};\n\nexport const deleteList = (payload: any) => {\n  return {\n    type: DELETE_LIST,\n    payload,\n  };\n};\n\nexport const addTask = (payload: any) => {\n  return {\n    type: ADD_TASK,\n    payload,\n  };\n};\n\nexport const editTask = (payload: any) => {\n  return {\n    type: EDIT_TASK,\n    payload,\n  };\n};\n\nexport const deleteTask = (payload: any) => {\n  return {\n    type: DELETE_TASK,\n    payload,\n  };\n};\n\nexport const moveTask = (payload: any) => {\n  return {\n    type: MOVE_TASK,\n    payload,\n  };\n};\n","export const LOAD_BOARDS = \"LOAD_BOARDS\";\nexport const LOAD_BOARD = \"LOAD_BOARD\";\nexport const ADD_BOARD = \"ADD_BOARD\";\nexport const EDIT_BOARD = \"EDIT_BOARD\";\nexport const DELETE_BOARD = \"DELETE_BOARD\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const EDIT_LIST = \"EDIT_LIST\";\nexport const DELETE_LIST = \"DELETE_LIST\";\nexport const ADD_TASK = \"ADD_TASK\";\nexport const EDIT_TASK = \"EDIT_TASK\";\nexport const DELETE_TASK = \"DELETE_TASK\";\nexport const MOVE_TASK = \"MOVE_TASK\";\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { logout } from \"../redux/actions\";\nimport { MainState } from \"../redux/types\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n} from \"reactstrap\";\n\ninterface Props {\n  logout: typeof logout;\n}\n\ninterface States {\n  isOpen: boolean;\n}\n\nclass Header extends React.Component<Props, States> {\n  readonly state: States = {\n    isOpen: false,\n  };\n\n  toggle = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  doLogout = () => {\n    this.props.logout();\n  };\n\n  render() {\n    const { isOpen } = this.state;\n    return (\n      <Navbar color=\"light\" light expand=\"md\" fixed=\"top\">\n        <NavbarBrand href=\"/\">Task Board</NavbarBrand>\n        <NavbarToggler onClick={this.toggle} />\n        <Collapse isOpen={isOpen} navbar className=\"justify-content-end\">\n          <Nav navbar>\n            <NavItem>\n              <NavLink\n                to=\"/taskBoard\"\n                className=\"nav-link\"\n                activeClassName=\"active\"\n              >\n                Home\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                to=\"/boards\"\n                className=\"nav-link\"\n                activeClassName=\"active\"\n              >\n                Boards\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                onClick={this.doLogout}\n                exact\n                to=\"#\"\n                className=\"nav-link\"\n                activeClassName=\"logout\"\n              >\n                Logout\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: MainState) => {\n  const { loggedIn } = auth;\n  return { loggedIn };\n};\n\nconst mapDispatchToProps = {\n  logout,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import { LOGIN_SUCCESS, LOGOUT, SET_CURRENT_BOARD } from \"../types\";\n\nexport const loginSuccess = (payload: any) => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload,\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: LOGOUT,\n  };\n};\n\nexport const setCurrentBoard = (payload: any) => {\n  return {\n    type: SET_CURRENT_BOARD,\n    payload,\n  };\n};\n","export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SET_CURRENT_BOARD = \"SET_CURRENT_BOARD\";\n","import React from \"react\";\nimport { FormGroup, Label, Input, FormFeedback } from \"reactstrap\";\n\ninterface MyProps {\n  name: string;\n  label: string;\n  type: any;\n  value: string;\n  onChange: (event: any) => void;\n  showError?: boolean;\n  errorMessage?: string;\n}\n\nconst TextInput = ({\n  label,\n  type,\n  name,\n  value,\n  onChange,\n  showError,\n  errorMessage,\n}: MyProps) => (\n  <FormGroup>\n    <Label>{label}</Label>\n    <Input\n      type={type}\n      name={name}\n      value={value}\n      onChange={onChange}\n      invalid={showError}\n    />\n    <FormFeedback>{errorMessage}</FormFeedback>\n  </FormGroup>\n);\n\nexport default TextInput;\n","import React from \"react\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\n\ninterface Props {\n  modalOpen: boolean;\n  modalAction: string;\n  modalType: string;\n  submitModal: () => void;\n  closeModal: () => void;\n  deleteAction?: any;\n  children: any;\n}\n\ninterface States {\n  showDelete: boolean;\n}\n\nclass CrudModal extends React.Component<Props, States> {\n  readonly state: States = {\n    showDelete: false,\n  };\n\n  showDelete = () => {\n    this.setState({ showDelete: true });\n  };\n\n  deleteAction = () => {\n    this.props.deleteAction();\n    this.setState({ showDelete: false });\n    this.props.closeModal();\n  };\n\n  closeDelete = () => {\n    this.setState({ showDelete: false });\n  };\n\n  render() {\n    const {\n      modalOpen,\n      modalAction,\n      modalType,\n      submitModal,\n      closeModal,\n      children,\n    } = this.props;\n\n    return (\n      <div>\n        <Modal isOpen={modalOpen} centered={true}>\n          <ModalHeader toggle={closeModal}>\n            {modalAction} {modalType}\n          </ModalHeader>\n          <ModalBody>{children}</ModalBody>\n          <ModalFooter\n            className={modalAction === \"Edit\" ? \"justify-content-between\" : \"\"}\n          >\n            {modalAction === \"Edit\" && (\n              <Button color=\"primary\" onClick={this.showDelete}>\n                Delete\n              </Button>\n            )}\n            <Button color=\"primary\" onClick={submitModal}>\n              {modalAction === \"Edit\" ? \"Save\" : modalAction}\n            </Button>\n          </ModalFooter>\n        </Modal>\n        <Modal isOpen={this.state.showDelete} centered={true} size=\"sm\">\n          <ModalBody>Are you sure you want to delete?</ModalBody>\n          <ModalFooter centered={true} className=\"justify-content-center\">\n            <Button color=\"primary\" onClick={this.closeDelete}>\n              No\n            </Button>\n            <Button color=\"primary\" onClick={this.deleteAction}>\n              Yes\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default CrudModal;\n","const apiUrl = \"http://localhost:8080/api/\";\n\nexport const fetchApi = async (\n  endPoint: string,\n  method: string,\n  data: any = {}\n) => {\n  try {\n    const bodyData =\n      method === \"POST\" || method === \"PUT\"\n        ? { body: JSON.stringify(data) }\n        : {};\n\n    const response = await fetch(apiUrl + endPoint, {\n      method: method,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      ...bodyData,\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n    return { status: false };\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport BootstrapTable from \"react-bootstrap-table-next\";\nimport { loadBoards, addBoard, editBoard, deleteBoard } from \"../redux/actions\";\nimport { MainState, BoardState } from \"../redux/types\";\nimport Header from \"../components/Header\";\nimport TextInput from \"../components/TextInput\";\nimport CrudModal from \"../components/CrudModal\";\nimport { fetchApi } from \"../lib/api\";\n\ninterface Props {\n  boards: Array<BoardState>;\n  loadBoards: typeof loadBoards;\n  addBoard: typeof addBoard;\n  editBoard: typeof editBoard;\n  deleteBoard: typeof deleteBoard;\n}\n\ninterface States {\n  boardID: string;\n  boardName: string;\n  modalOpen: boolean;\n  modalAction: string;\n  showError: boolean;\n}\n\nclass Boards extends React.Component<Props, States> {\n  readonly state: States = {\n    boardID: \"0\",\n    boardName: \"\",\n    modalOpen: false,\n    modalAction: \"\",\n    showError: false,\n  };\n\n  componentDidMount() {\n    this.loadBoards();\n  }\n\n  loadBoards = async () => {\n    const apiResult = await fetchApi(\"board\", \"GET\");\n\n    if (apiResult.status === true) {\n      const boards = apiResult.boards;\n      this.props.loadBoards(boards);\n    }\n  };\n\n  submitModal = () => {\n    const { modalAction } = this.state;\n\n    if (modalAction === \"Delete\") {\n      this.deleteBoard();\n    } else if (modalAction === \"Edit\") {\n      this.editBoard();\n    } else {\n      this.createBoard();\n    }\n  };\n\n  deleteBoard = async () => {\n    const { boardID } = this.state;\n    this.props.deleteBoard({ id: boardID });\n    const apiResult = await fetchApi(\"board/\" + boardID, \"DELETE\");\n\n    if (apiResult.status === true) {\n      this.props.deleteBoard({ id: boardID });\n      this.closeModal();\n    }\n  };\n\n  editBoard = async () => {\n    const { boardID, boardName } = this.state;\n\n    if (boardName === \"\") {\n      this.setState({ showError: true });\n      return false;\n    }\n\n    const data = {\n      id: boardID,\n      name: boardName,\n    };\n\n    // send to api\n    const apiResult = await fetchApi(\"board/\" + boardID, \"PUT\", data);\n\n    if (apiResult.status === true) {\n      this.props.editBoard(data);\n      this.closeModal();\n    }\n  };\n\n  createBoard = async () => {\n    const { boardName } = this.state;\n\n    if (boardName === \"\") {\n      this.setState({ showError: true });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"board\", \"POST\", { name: boardName });\n\n    if (apiResult.status === true) {\n      const boardID = apiResult.boardID;\n\n      const data = {\n        id: boardID,\n        name: boardName,\n        taskList: [],\n      };\n\n      this.props.addBoard(data);\n      this.closeModal();\n    }\n  };\n\n  onChange = (event: any) => {\n    const key = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    this.setState({ [key]: value } as any);\n  };\n\n  openCreateModal = () => {\n    this.setState({ modalOpen: true, modalAction: \"Create\" });\n  };\n\n  openEditModal = (row: any) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Edit\",\n      boardID: id,\n      boardName: name,\n    });\n  };\n\n  closeModal = () => {\n    this.setState({\n      modalOpen: false,\n      boardName: \"\",\n      boardID: \"0\",\n      showError: false,\n    });\n  };\n\n  actionsFormatter = (cell: any, row: any) => {\n    return (\n      <div className=\"btn-actions\">\n        <Button\n          outline\n          color=\"primary\"\n          size=\"sm\"\n          onClick={() => this.openEditModal(row)}\n        >\n          Edit\n        </Button>\n      </div>\n    );\n  };\n\n  render() {\n    const { boardName, modalOpen, modalAction } = this.state;\n    const { boards } = this.props;\n    const columns = [\n      {\n        dataField: \"name\",\n        text: \"Board Name\",\n        sort: true,\n      },\n      {\n        dataField: \"actions\",\n        text: \"Actions\",\n        isDummyField: true,\n        formatter: this.actionsFormatter,\n        headerStyle: () => {\n          return { width: \"130px\", \"text-align\": \"center\" };\n        },\n      },\n    ];\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"section\">\n          <div className=\"d-inline-block mb-2\">\n            <h3>Boards </h3>\n          </div>\n          <Button\n            color=\"success\"\n            className=\"float-right\"\n            onClick={this.openCreateModal}\n          >\n            Create Board\n          </Button>\n          <BootstrapTable\n            bootstrap4\n            keyField=\"id\"\n            data={boards}\n            columns={columns}\n          />\n        </div>\n        <CrudModal\n          modalOpen={modalOpen}\n          modalAction={modalAction}\n          modalType=\"Board\"\n          deleteAction={this.deleteBoard}\n          submitModal={this.submitModal}\n          closeModal={this.closeModal}\n        >\n          {modalAction === \"Delete\" ? (\n            <p>Board: {boardName}</p>\n          ) : (\n            <TextInput\n              name=\"boardName\"\n              label=\"Board Name\"\n              type=\"text\"\n              value={boardName}\n              onChange={this.onChange}\n              showError={this.state.showError}\n              errorMessage=\"Please enter a name\"\n            />\n          )}\n        </CrudModal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ task }: MainState) => {\n  const { boards } = task;\n  return { boards };\n};\n\nconst mapDispatchToProps = {\n  loadBoards,\n  addBoard,\n  editBoard,\n  deleteBoard,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Boards);\n","import React from \"react\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\n\ninterface MyProps {\n  name: string;\n  label: string;\n  value: string;\n  selectLabel: string;\n  options: any;\n  onChange: (event: any) => void;\n}\n\nconst SelectInput = ({\n  label,\n  name,\n  value,\n  selectLabel,\n  options,\n  onChange,\n}: MyProps) => (\n  <FormGroup>\n    <Label>{label}</Label>\n    <Input type=\"select\" name={name} value={value} onChange={onChange}>\n      <option value=\"0\">{selectLabel}</option>\n      {options.map((row: any, index: any) => {\n        return (\n          <option value={row.id} key={index}>\n            {row.name}\n          </option>\n        );\n      })}\n    </Input>\n  </FormGroup>\n);\n\nexport default SelectInput;\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\ninterface MyProps {\n  id: string;\n  name: string;\n  index: number;\n  editTask: any;\n}\n\nconst grid = 8;\n\nconst getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n  position: \"relative\",\n  userSelect: \"none\",\n  padding: `${grid * 2}px ${grid}px`,\n  margin: `0 0 ${grid}px 0`,\n  background: \"#FFF\",\n  boxShadow: \"0 1px 1px rgba(0,0,0, .20)\",\n  border: \"1px solid #fff\",\n  ...draggableStyle,\n});\n\nconst TaskItem = ({ id, name, index, editTask }: MyProps) => (\n  <Draggable key={id} draggableId={id} index={index}>\n    {(provided, snapshot) => (\n      <div\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n        onClick={editTask}\n      >\n        <span className=\"btn-span\">{name}</span>\n      </div>\n    )}\n  </Draggable>\n);\n\nexport default TaskItem;\n","import React from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport { Button } from \"reactstrap\";\nimport TaskItem from \"./TaskItem\";\n\ninterface MyProps {\n  name: string;\n  id: string;\n  tasks: any;\n  showEdit: any;\n  showAddTask: any;\n  showEditTask: any;\n}\n\nconst grid = 8;\n\nconst getListStyle = (isDraggingOver: boolean) => ({\n  background: isDraggingOver ? \"lightblue\" : \"#f3f5f7\",\n  borderRadius: \"4px\",\n  border: \"1px solid #eee\",\n  padding: grid,\n  width: 300,\n  minWidth: 300,\n  marginRight: 10,\n  marginBottom: 30,\n});\n\nconst TaskList = ({\n  id,\n  name,\n  tasks,\n  showEdit,\n  showAddTask,\n  showEditTask,\n}: MyProps) => (\n  <Droppable droppableId={id}>\n    {(provided, snapshot) => (\n      <div\n        ref={provided.innerRef}\n        className=\"relative\"\n        style={getListStyle(snapshot.isDraggingOver)}\n        {...provided.droppableProps}\n      >\n        <div className=\"tasklist-header\" onClick={showEdit}>\n          <h4>{name}</h4>\n        </div>\n        <div className=\"task-container\">\n          {tasks &&\n            tasks.map((task: any, index: any) => (\n              <TaskItem\n                key={index}\n                id={task.id}\n                name={task.name}\n                index={index}\n                editTask={() => showEditTask(task)}\n              />\n            ))}\n          {provided.placeholder}\n        </div>\n        <div className=\"bottom-task-actions\">\n          <Button color=\"success\" onClick={showAddTask}>\n            Add Task\n          </Button>\n        </div>\n      </div>\n    )}\n  </Droppable>\n);\n\nexport default TaskList;\n","export const reorderArray = (list: any, startIndex: any, endIndex: any) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nexport const moveArray = (\n  source: any,\n  destination: any,\n  startIndex: any,\n  endIndex: any\n) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(startIndex, 1);\n\n  destClone.splice(endIndex, 0, removed);\n\n  const result = { sourceItems: sourceClone, destinationItems: destClone };\n  return result;\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport { DragDropContext } from \"react-beautiful-dnd\";\nimport {\n  addList,\n  editList,\n  deleteList,\n  addTask,\n  editTask,\n  deleteTask,\n  loadBoard,\n  loadBoards,\n  moveTask,\n  setCurrentBoard,\n} from \"../redux/actions\";\nimport { MainState, BoardState } from \"../redux/types\";\nimport Header from \"../components/Header\";\nimport SelectInput from \"../components/SelectInput\";\nimport TextInput from \"../components/TextInput\";\nimport TaskList from \"../components/TaskList\";\nimport CrudModal from \"../components/CrudModal\";\nimport { fetchApi } from \"../lib/api\";\nimport { reorderArray, moveArray } from \"../lib/tools\";\n\ninterface Props {\n  currentBoard: string;\n  taskLists: any;\n  boards: Array<BoardState>;\n  setCurrentBoard: typeof setCurrentBoard;\n  addList: typeof addList;\n  editList: typeof editList;\n  deleteList: typeof deleteList;\n  addTask: typeof addTask;\n  editTask: typeof editTask;\n  deleteTask: typeof deleteTask;\n  moveTask: typeof moveTask;\n  loadBoard: typeof loadBoard;\n  loadBoards: typeof loadBoards;\n}\n\ninterface States {\n  listID: string;\n  listName: string;\n  taskID: string;\n  taskName: string;\n  modalOpen: boolean;\n  modalAction: string;\n  modalType: string;\n  showError: boolean;\n}\n\nclass TaskBoard extends React.Component<Props, States> {\n  readonly state: States = {\n    listID: \"0\",\n    listName: \"\",\n    taskID: \"0\",\n    taskName: \"\",\n    modalOpen: false,\n    modalAction: \"\",\n    modalType: \"\",\n    showError: false,\n  };\n\n  componentDidMount() {\n    this.loadDefaultBoard();\n  }\n\n  submitModal = () => {\n    const { modalAction, modalType } = this.state;\n\n    if (modalType === \"Task\") {\n      if (modalAction === \"Edit\") {\n        this.editTask();\n      } else {\n        this.createTask();\n      }\n    } else {\n      if (modalAction === \"Edit\") {\n        this.editList();\n      } else {\n        this.createList();\n      }\n    }\n  };\n\n  deleteList = async () => {\n    const { currentBoard } = this.props;\n    const { listID } = this.state;\n\n    const apiResult = await fetchApi(\"taskList/\" + listID, \"DELETE\");\n\n    if (apiResult.status === true) {\n      const data = {\n        boardID: currentBoard,\n        id: listID,\n      };\n      this.props.deleteList(data);\n      this.closeModal();\n    }\n  };\n\n  editList = async () => {\n    const { currentBoard } = this.props;\n    const { listID, listName } = this.state;\n\n    if (listName === \"\") {\n      this.setState({ showError: true });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"taskList/\" + listID, \"PUT\", {\n      name: listName,\n    });\n\n    if (apiResult.status === true) {\n      const data = {\n        boardID: currentBoard,\n        id: listID,\n        name: listName,\n      };\n\n      this.props.editList(data);\n      this.closeModal();\n    }\n  };\n\n  createList = async () => {\n    const { currentBoard } = this.props;\n    const { listName } = this.state;\n\n    if (listName === \"\") {\n      this.setState({ showError: true });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"taskList\", \"POST\", {\n      name: listName,\n      boardID: currentBoard,\n    });\n\n    if (apiResult.status === true) {\n      const taskListID = apiResult.taskListID;\n\n      const data = {\n        id: taskListID,\n        name: listName,\n        tasks: [],\n      };\n\n      this.props.addList({ boardID: currentBoard, taskList: data });\n      this.closeModal();\n    }\n  };\n\n  deleteTask = async () => {\n    const { currentBoard } = this.props;\n    const { listID, taskID } = this.state;\n\n    const apiResult = await fetchApi(\"task/\" + taskID, \"DELETE\");\n\n    if (apiResult.status === true) {\n      const data = {\n        boardID: currentBoard,\n        listID: listID,\n        id: taskID,\n      };\n      this.props.deleteTask(data);\n      this.closeModal();\n    }\n  };\n\n  editTask = async () => {\n    const { currentBoard } = this.props;\n    const { listID, taskID, taskName } = this.state;\n\n    if (taskName === \"\") {\n      this.setState({ showError: true });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"task/\" + taskID, \"PUT\", {\n      name: taskName,\n    });\n\n    if (apiResult.status === true) {\n      const data = {\n        boardID: currentBoard,\n        listID: listID,\n        id: taskID,\n        name: taskName,\n      };\n\n      this.props.editTask(data);\n      this.closeModal();\n    }\n  };\n\n  createTask = async () => {\n    const { currentBoard } = this.props;\n    const { listID, taskName } = this.state;\n\n    if (taskName === \"\") {\n      this.setState({ showError: true });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"task\", \"POST\", {\n      name: taskName,\n      listID: listID,\n    });\n\n    if (apiResult.status === true) {\n      const taskID = apiResult.taskID;\n\n      const data = {\n        id: taskID,\n        name: taskName,\n      };\n\n      this.props.addTask({ boardID: currentBoard, listID: listID, task: data });\n      this.closeModal();\n    }\n  };\n\n  openCreateModal = () => {\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Create\",\n      modalType: \"List\",\n    });\n  };\n\n  openCreateTaskModal = (row: any) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Create\",\n      modalType: \"Task\",\n      listID: id,\n      listName: name,\n    });\n  };\n\n  openEditModal = (row: any) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Edit\",\n      modalType: \"List\",\n      listID: id,\n      listName: name,\n    });\n  };\n\n  openEditTaskModal = (row: any, task: any) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Edit\",\n      modalType: \"Task\",\n      listID: id,\n      listName: name,\n      taskID: task.id,\n      taskName: task.name,\n    });\n  };\n\n  closeModal = () => {\n    this.setState({\n      modalOpen: false,\n      modalType: \"\",\n      listName: \"\",\n      listID: \"0\",\n      taskID: \"0\",\n      taskName: \"\",\n      showError: false,\n    });\n  };\n\n  onChange = (event: any) => {\n    const key = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    this.setState({ [key]: value } as any);\n  };\n\n  onDefaultBoardChange = (event: any) => {\n    const boardID = event.currentTarget.value;\n    this.props.setCurrentBoard(boardID);\n    this.loadBoard(boardID);\n  };\n\n  loadDefaultBoard = () => {\n    const { currentBoard } = this.props;\n    this.loadBoard(currentBoard);\n  };\n\n  loadBoard = async (boardID: string) => {\n    if (boardID === \"0\") {\n      this.loadBoards();\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"board/\" + boardID, \"GET\");\n\n    if (apiResult.status === true && apiResult.board) {\n      const board = apiResult.board;\n      this.props.loadBoard(board);\n    }\n  };\n\n  loadBoards = async () => {\n    const apiResult = await fetchApi(\"board\", \"GET\");\n\n    if (apiResult.status === true) {\n      const boards = apiResult.boards;\n      this.props.loadBoards(boards);\n    }\n  };\n\n  onDragEnd = (result: any) => {\n    const { currentBoard, taskLists } = this.props;\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      console.log(\"Dropped outside\");\n      return;\n    }\n\n    const boardID = currentBoard;\n    const sourceID = source.droppableId;\n    const destinationID = destination.droppableId;\n    const sourceIndex = source.index;\n    const destinationIndex = destination.index;\n\n    const data = {\n      sourceID,\n      destinationID,\n      sourceIndex,\n      destinationIndex,\n    };\n\n    // same list.\n    if (source.droppableId === destination.droppableId) {\n      // get tasklist.\n      const list = getTasks(taskLists, destinationID);\n      // reorder items.\n      const tasks: any = reorderArray(list, sourceIndex, destinationIndex);\n\n      // update redux\n      this.props.moveTask({\n        boardID: boardID,\n        id: destinationID,\n        tasks: tasks,\n      });\n\n      console.log(tasks);\n      console.log(this.props.boards);\n      return;\n    }\n\n    const sourceList = getTasks(taskLists, sourceID);\n    const destinationList = getTasks(taskLists, destinationID);\n\n    // new list\n    const moveResult = moveArray(\n      sourceList,\n      destinationList,\n      sourceIndex,\n      destinationIndex\n    );\n\n    const { sourceItems, destinationItems }: any = moveResult;\n\n    // update redux source items\n    this.props.moveTask({\n      boardID: boardID,\n      id: sourceID,\n      tasks: sourceItems,\n    });\n\n    // update redux destination items\n    this.props.moveTask({\n      boardID: boardID,\n      id: destinationID,\n      tasks: destinationItems,\n    });\n\n    fetchApi(\"taskList/updateOrder\", \"POST\", data);\n  };\n\n  render() {\n    const { boards, currentBoard, taskLists } = this.props;\n    const {\n      listName,\n      taskName,\n      modalOpen,\n      modalAction,\n      modalType,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"board-tools\">\n          <div className=\"select-board\">\n            <SelectInput\n              name=\"defaultBoard\"\n              label=\"Board Name\"\n              value={currentBoard}\n              selectLabel=\"Select Board\"\n              options={boards}\n              onChange={this.onDefaultBoardChange}\n            />\n          </div>\n          {this.props.currentBoard !== \"0\" && (\n            <Button color=\"success\" onClick={this.openCreateModal}>\n              Create List\n            </Button>\n          )}\n        </div>\n        <div className=\"d-flex ml-2\">\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            {taskLists &&\n              taskLists.map((list: any, index: any) => {\n                return (\n                  <TaskList\n                    key={index}\n                    id={list.id}\n                    name={list.name}\n                    tasks={list.tasks}\n                    showEdit={() => this.openEditModal(list)}\n                    showAddTask={() => this.openCreateTaskModal(list)}\n                    showEditTask={(task: any) =>\n                      this.openEditTaskModal(list, task)\n                    }\n                  />\n                );\n              })}\n          </DragDropContext>\n        </div>\n        <CrudModal\n          modalOpen={modalOpen}\n          modalAction={modalAction}\n          modalType={modalType}\n          deleteAction={\n            modalType === \"List\" ? this.deleteList : this.deleteTask\n          }\n          submitModal={this.submitModal}\n          closeModal={this.closeModal}\n        >\n          {modalAction === \"Delete\" ? (\n            <p>\n              {modalType} {modalType === \"List\" ? listName : taskName}\n            </p>\n          ) : (\n            <div>\n              {modalType === \"List\" ? (\n                <div>\n                  <TextInput\n                    name=\"listName\"\n                    label=\"List Name\"\n                    type=\"text\"\n                    value={listName}\n                    onChange={this.onChange}\n                    showError={this.state.showError}\n                    errorMessage=\"Please enter a name\"\n                  />\n                </div>\n              ) : (\n                <div>\n                  <p>List {listName}</p>\n                  <TextInput\n                    name=\"taskName\"\n                    label=\"Task Name\"\n                    type=\"text\"\n                    value={taskName}\n                    onChange={this.onChange}\n                    showError={this.state.showError}\n                    errorMessage=\"Please enter a name\"\n                  />\n                </div>\n              )}\n            </div>\n          )}\n        </CrudModal>\n      </div>\n    );\n  }\n}\n\nconst getTasks = (taskLists: any, taskListID: string) => {\n  const row = taskLists.filter(\n    (taskList: any) => taskList.id === taskListID\n  )[0];\n  const tasks = row == null ? [] : row.tasks;\n  return tasks;\n};\n\nconst getTaskLists = (boards: Array<BoardState>, boardID: string) => {\n  const row = boards.filter((board: BoardState) => board.id === boardID)[0];\n  const taskLists = row == null ? [] : row.taskList;\n  return taskLists;\n};\n\nconst mapStateToProps = ({ task, auth }: MainState) => {\n  const { boards } = task;\n  const { currentBoard } = auth;\n  const taskLists = getTaskLists(boards, currentBoard);\n\n  return { boards, currentBoard, taskLists };\n};\n\nconst mapDispatchToProps = {\n  addList,\n  editList,\n  deleteList,\n  addTask,\n  editTask,\n  deleteTask,\n  loadBoard,\n  loadBoards,\n  moveTask,\n  setCurrentBoard,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskBoard);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport { loginSuccess } from \"../redux/actions\";\nimport { MainState } from \"../redux/types\";\nimport TextInput from \"../components/TextInput\";\n\ninterface Props {\n  loggedIn: boolean;\n  loginSuccess: typeof loginSuccess;\n}\n\ninterface States {\n  username: string;\n  password: string;\n  showError: boolean;\n  errorInput: string;\n}\n\nclass Login extends React.Component<Props, States> {\n  readonly state: States = {\n    username: \"demo\",\n    password: \"demo\",\n    showError: false,\n    errorInput: \"\",\n  };\n\n  checkLogin = () => {\n    const { username, password } = this.state;\n\n    if (username === \"\") {\n      this.setState({ showError: true, errorInput: \"username\" });\n      return false;\n    }\n    if (password === \"\") {\n      this.setState({ showError: true, errorInput: \"password\" });\n      return false;\n    }\n\n    if (username === \"demo\" && password === \"demo\") {\n      this.props.loginSuccess(\"demo\");\n      return true;\n    }\n\n    // show fail\n  };\n\n  onChange = (event: any) => {\n    const key = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    this.setState({ [key]: value } as any);\n  };\n\n  render() {\n    const { username, password } = this.state;\n    return (\n      <div className=\"login-form\">\n        <h1 className=\"pb-4\">\n          <span className=\"font-weight-bold\">Task Board</span>\n        </h1>\n        <TextInput\n          name=\"username\"\n          label=\"Username\"\n          type=\"text\"\n          value={username}\n          onChange={this.onChange}\n          showError={\n            this.state.errorInput === \"username\" && this.state.showError\n          }\n          errorMessage=\"Please enter a username\"\n        />\n        <TextInput\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          value={password}\n          onChange={this.onChange}\n          showError={\n            this.state.errorInput === \"password\" && this.state.showError\n          }\n          errorMessage=\"Please enter a password\"\n        />\n        <Button\n          className=\"btn-lg btn-dark btn-block mt-4\"\n          onClick={this.checkLogin}\n        >\n          Login\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: MainState) => {\n  const { loggedIn } = auth;\n  return { loggedIn };\n};\n\nconst mapDispatchToProps = {\n  loginSuccess,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst LoginRoute = ({ loggedIn, ...props }: any) =>\n  loggedIn ? <Redirect to=\"/taskBoard\" /> : <Route {...props} />;\n\nexport default LoginRoute;\n","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\n\nconst ProtectedRoute = ({ loggedIn, ...props }: any) =>\n  loggedIn ? <Route {...props} /> : <Redirect to=\"/\" />;\n\nexport default ProtectedRoute;\n","import React from \"react\";\nimport { HashRouter, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Boards from \"./scenes/Boards\";\nimport TaskBoard from \"./scenes/TaskBoard\";\nimport Login from \"./scenes/Login\";\nimport LoginRoute from \"./components/LoginRoute\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\nimport { MainState } from \"./redux/types\";\n\ninterface Props {\n  loggedIn: boolean;\n}\n\ninterface States {}\n\nclass App extends React.Component<Props, States> {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <LoginRoute\n            exact\n            path=\"/\"\n            component={Login}\n            loggedIn={this.props.loggedIn}\n          />\n          <ProtectedRoute\n            path=\"/taskBoard\"\n            component={TaskBoard}\n            loggedIn={this.props.loggedIn}\n          />\n          <ProtectedRoute\n            path=\"/boards\"\n            component={Boards}\n            loggedIn={this.props.loggedIn}\n          />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: MainState) => {\n  const { loggedIn } = auth;\n  return { loggedIn };\n};\n\nconst mapDispatchToProps = {\n  undefined,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { LOGIN_SUCCESS, LOGOUT, SET_CURRENT_BOARD, AuthState } from \"../types\";\n\nconst INITIAL_STATE: AuthState = {\n  loggedIn: false,\n  token: \"\",\n  currentBoard: \"0\",\n};\n\nexport default (state = INITIAL_STATE, action: any) => {\n  switch (action.type) {\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        loggedIn: true,\n      };\n    case SET_CURRENT_BOARD:\n      return {\n        ...state,\n        currentBoard: action.payload,\n      };\n    case LOGOUT:\n      return { ...INITIAL_STATE };\n    default:\n      return state;\n  }\n};\n","import {\n  LOAD_BOARDS,\n  LOAD_BOARD,\n  ADD_BOARD,\n  EDIT_BOARD,\n  DELETE_BOARD,\n  ADD_TASK,\n  EDIT_TASK,\n  DELETE_TASK,\n  MOVE_TASK,\n  ADD_LIST,\n  EDIT_LIST,\n  DELETE_LIST,\n  LOGOUT,\n  TaskState,\n} from \"../types\";\n\nconst INITIAL_STATE: TaskState = {\n  boards: [],\n};\n\nexport default (state = INITIAL_STATE, action: any) => {\n  switch (action.type) {\n    case LOAD_BOARDS:\n      return {\n        ...state,\n        boards: action.payload,\n      };\n    case ADD_BOARD:\n      return {\n        ...state,\n        boards: [...state.boards, action.payload],\n      };\n    case EDIT_BOARD:\n      return {\n        ...state,\n        boards: state.boards.map((board: any) =>\n          board.id === action.payload.id\n            ? { ...board, name: action.payload.name }\n            : board\n        ),\n      };\n    case DELETE_BOARD:\n      return {\n        ...state,\n        boards: state.boards.filter(\n          (board: any) => board.id !== action.payload.id\n        ),\n      };\n    case ADD_LIST:\n      return {\n        ...state,\n        boards: state.boards.map((board: any) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: [...board.taskList, action.payload.taskList],\n              }\n            : board\n        ),\n      };\n    case EDIT_LIST:\n      return {\n        ...state,\n        boards: state.boards.map((board: any) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: any) =>\n                  list.id === action.payload.id\n                    ? { ...list, name: action.payload.name }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case DELETE_LIST:\n      return {\n        ...state,\n        boards: state.boards.map((board: any) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.filter(\n                  (list: any) => list.id !== action.payload.id\n                ),\n              }\n            : board\n        ),\n      };\n    case ADD_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: any) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: any) =>\n                  list.id === action.payload.listID\n                    ? { ...list, tasks: [...list.tasks, action.payload.task] }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case EDIT_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: any) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: any) =>\n                  list.id === action.payload.listID\n                    ? {\n                        ...list,\n                        tasks: list.tasks.map((task: any) =>\n                          task.id === action.payload.id\n                            ? { ...task, name: action.payload.name }\n                            : task\n                        ),\n                      }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case DELETE_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: any) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: any) =>\n                  list.id === action.payload.listID\n                    ? {\n                        ...list,\n                        tasks: list.tasks.filter(\n                          (task: any) => task.id !== action.payload.id\n                        ),\n                      }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case LOAD_BOARD:\n      return {\n        ...state,\n        boards: state.boards.map((board: any) =>\n          board.id === action.payload.id\n            ? {\n                ...board,\n                name: action.payload.name,\n                taskList: action.payload.taskList,\n              }\n            : board\n        ),\n      };\n    case MOVE_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: any) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: any) =>\n                  list.id === action.payload.id\n                    ? { ...list, tasks: action.payload.tasks }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case LOGOUT:\n      return { ...INITIAL_STATE };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport authReducer from \"./authReducer\";\nimport taskReducer from \"./taskReducer\";\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  task: taskReducer,\n});\n\nexport default rootReducer;\n","import { applyMiddleware, createStore } from \"redux\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"./reducers\";\n\nconst persistConfig = {\n  key: \"main\",\n  storage,\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst middleware = applyMiddleware(thunk);\nconst store = createStore(persistedReducer, middleware);\nconst persistor = persistStore(store);\nexport { store, persistor };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"./assets/css/App.css\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </PersistGate>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}