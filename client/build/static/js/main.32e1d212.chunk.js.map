{"version":3,"sources":["redux/reducers/authReducer.ts","redux/reducers/taskReducer.ts","redux/reducers/index.ts","redux/types/authTypes.ts","redux/types/taskTypes.ts","redux/store.ts","redux/actions/taskActions.ts","components/Header.tsx","redux/actions/authActions.ts","components/TextInput.tsx","components/CrudModal.tsx","lib/api.ts","scenes/Boards.tsx","components/SelectInput.tsx","components/TaskItem.tsx","components/TaskList.tsx","lib/tools.ts","scenes/TaskBoard.tsx","scenes/Login.tsx","components/LoginRoute.tsx","components/ProtectedRoute.tsx","Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["INITIAL_STATE","id","username","token","currentBoardID","loggedIn","INITIAL_STATE_LOGGED","boards","rootReducer","combineReducers","auth","state","action","type","payload","task","map","board","name","filter","boardID","taskList","list","listID","tasks","persistConfig","key","storage","persistedReducer","persistReducer","middleware","applyMiddleware","thunk","store","createStore","persistor","persistStore","loadBoards","Header","isOpen","toggle","setState","doLogout","props","logout","this","Navbar","color","light","expand","fixed","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","className","Nav","NavItem","to","activeClassName","exact","React","Component","mapDispatchToProps","connect","TextInput","label","value","onChange","showError","errorMessage","FormGroup","Label","Input","invalid","FormFeedback","CrudModal","showDelete","deleteAction","closeDelete","modalOpen","modalAction","modalType","submitModal","closeModal","children","Modal","centered","ModalHeader","ModalBody","ModalFooter","Button","size","fetchApi","endPoint","method","a","data","bodyData","body","JSON","stringify","fetch","headers","Accept","response","json","console","log","error","status","Boards","boardName","apiResult","deleteBoard","editBoard","createBoard","addBoard","event","currentTarget","openCreateModal","openEditModal","row","actionsFormatter","cell","outline","columns","dataField","text","sort","isDummyField","formatter","headerStyle","width","bootstrap4","keyField","SelectInput","selectLabel","options","index","TaskItem","editTask","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","isDragging","draggableStyle","position","userSelect","padding","grid","margin","background","boxShadow","border","TaskList","showEdit","showAddTask","showEditTask","droppableId","isDraggingOver","borderRadius","minWidth","marginRight","marginBottom","droppableProps","placeholder","reorderArray","startIndex","endIndex","result","Array","from","splice","removed","moveArray","source","destination","sourceClone","destClone","sourceItems","destinationItems","TaskBoard","listName","taskID","taskName","createTask","editList","createList","deleteList","taskListID","addList","deleteTask","addTask","openCreateTaskModal","openEditTaskModal","onDefaultBoardChange","setCurrentBoard","loadBoard","loadDefaultBoard","onDragEnd","currentBoard","taskLists","sourceID","destinationID","sourceIndex","destinationIndex","getTasks","newTasks","moveTask","sourceList","destinationList","moveResult","getCurrentBoard","Login","password","errorInput","checkLogin","loginSuccess","LoginRoute","ProtectedRoute","Router","path","component","undefined","App","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.32e1d212.chunk.js","sourcesContent":["import {\n  LOGIN_SUCCESS,\n  LOGOUT,\n  SET_CURRENT_BOARD,\n  AuthState,\n  AuthActionTypes,\n} from \"../types\";\n\nexport const INITIAL_STATE: AuthState = {\n  id: \"0\",\n  username: \"\",\n  token: \"\",\n  currentBoardID: \"0\",\n  loggedIn: false,\n};\n\nexport const INITIAL_STATE_LOGGED: AuthState = {\n  id: \"demo\",\n  username: \"demo\",\n  token: \"demo\",\n  currentBoardID: \"0\",\n  loggedIn: true,\n};\n\nexport function reducer(state = INITIAL_STATE_LOGGED, action: AuthActionTypes) {\n  switch (action.type) {\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        loggedIn: true,\n      };\n    case SET_CURRENT_BOARD:\n      return {\n        ...state,\n        currentBoardID: action.payload,\n      };\n    case LOGOUT:\n      return { ...INITIAL_STATE };\n    default:\n      return state;\n  }\n}\n","import {\n  LOAD_BOARDS,\n  LOAD_BOARD,\n  ADD_BOARD,\n  EDIT_BOARD,\n  DELETE_BOARD,\n  ADD_TASK,\n  EDIT_TASK,\n  DELETE_TASK,\n  MOVE_TASK,\n  ADD_LIST,\n  EDIT_LIST,\n  DELETE_LIST,\n  LOGOUT,\n  TaskState,\n  TaskActionTypes,\n  BoardState,\n  TaskListState,\n  TaskItemState,\n} from \"../types\";\n\nexport const INITIAL_STATE: TaskState = {\n  boards: [],\n};\n\nexport function reducer(state = INITIAL_STATE, action: TaskActionTypes) {\n  switch (action.type) {\n    case LOAD_BOARDS:\n      return {\n        ...state,\n        boards: action.payload,\n      };\n    case ADD_BOARD:\n      return {\n        ...state,\n        boards: [...state.boards, action.payload],\n      };\n    case EDIT_BOARD:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.id\n            ? { ...board, name: action.payload.name }\n            : board\n        ),\n      };\n    case DELETE_BOARD:\n      return {\n        ...state,\n        boards: state.boards.filter(\n          (board: BoardState) => board.id !== action.payload\n        ),\n      };\n    case ADD_LIST:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: [...board.taskList, action.payload.taskList],\n              }\n            : board\n        ),\n      };\n    case EDIT_LIST:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: TaskListState) =>\n                  list.id === action.payload.taskList.id\n                    ? { ...list, name: action.payload.taskList.name }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case DELETE_LIST:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.filter(\n                  (list: TaskListState) => list.id !== action.payload.id\n                ),\n              }\n            : board\n        ),\n      };\n    case ADD_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: TaskListState) =>\n                  list.id === action.payload.listID\n                    ? { ...list, tasks: [...list.tasks, action.payload.task] }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case EDIT_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: TaskListState) =>\n                  list.id === action.payload.listID\n                    ? {\n                        ...list,\n                        tasks: list.tasks.map((task: TaskItemState) =>\n                          task.id === action.payload.id\n                            ? { ...task, name: action.payload.name }\n                            : task\n                        ),\n                      }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case DELETE_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: TaskListState) =>\n                  list.id === action.payload.listID\n                    ? {\n                        ...list,\n                        tasks: list.tasks.filter(\n                          (task: TaskItemState) => task.id !== action.payload.id\n                        ),\n                      }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case LOAD_BOARD:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.id\n            ? {\n                ...board,\n                name: action.payload.name,\n                taskList: action.payload.taskList,\n              }\n            : board\n        ),\n      };\n    case MOVE_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: TaskListState) =>\n                  list.id === action.payload.id\n                    ? { ...list, tasks: action.payload.tasks }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case LOGOUT:\n      return { ...INITIAL_STATE };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport * as authReducer from \"./authReducer\";\nimport * as taskReducer from \"./taskReducer\";\nimport { AuthState, TaskState } from \"../types\";\n\nexport interface AppState {\n  auth: AuthState;\n  task: TaskState;\n}\n\nexport const AppInitialState: AppState = {\n  auth: authReducer.INITIAL_STATE,\n  task: taskReducer.INITIAL_STATE,\n};\n\nexport const AppInitialStateLogged: AppState = {\n  auth: authReducer.INITIAL_STATE_LOGGED,\n  task: taskReducer.INITIAL_STATE,\n};\n\nexport const rootReducer = combineReducers({\n  auth: authReducer.reducer,\n  task: taskReducer.reducer,\n});\n","export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SET_CURRENT_BOARD = \"SET_CURRENT_BOARD\";\n\nexport interface AuthState {\n  id: string;\n  username: string;\n  token: string;\n  currentBoardID: string;\n  loggedIn: boolean;\n}\n\ninterface LoginSuccessAction {\n  type: typeof LOGIN_SUCCESS;\n  payload: AuthState;\n}\n\ninterface SetCurrentBoardAction {\n  type: typeof SET_CURRENT_BOARD;\n  payload: string;\n}\n\nexport interface LogoutAction {\n  type: typeof LOGOUT;\n}\n\nexport type AuthActionTypes =\n  | LoginSuccessAction\n  | LogoutAction\n  | SetCurrentBoardAction;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { LogoutAction } from \"../types\";\nexport const LOAD_BOARDS = \"LOAD_BOARDS\";\nexport const LOAD_BOARD = \"LOAD_BOARD\";\nexport const ADD_BOARD = \"ADD_BOARD\";\nexport const EDIT_BOARD = \"EDIT_BOARD\";\nexport const DELETE_BOARD = \"DELETE_BOARD\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const EDIT_LIST = \"EDIT_LIST\";\nexport const DELETE_LIST = \"DELETE_LIST\";\nexport const ADD_TASK = \"ADD_TASK\";\nexport const EDIT_TASK = \"EDIT_TASK\";\nexport const DELETE_TASK = \"DELETE_TASK\";\nexport const MOVE_TASK = \"MOVE_TASK\";\n\nexport interface TaskItemState {\n  id: string;\n  name: string;\n  sortOrder: number;\n}\n\nexport interface TaskListState {\n  id: string;\n  name: string;\n  tasks: Array<TaskItemState>;\n}\n\nexport interface BoardState {\n  id: string;\n  name: string;\n  taskList: Array<TaskListState>;\n}\n\nexport interface TaskState {\n  boards: Array<BoardState>;\n}\n\ninterface LoadBoardsAction {\n  type: typeof LOAD_BOARDS;\n  payload: any;\n}\n\ninterface LoadBoardAction {\n  type: typeof LOAD_BOARD;\n  payload: any;\n}\n\ninterface AddBoardAction {\n  type: typeof ADD_BOARD;\n  payload: any;\n}\n\ninterface EditBoardAction {\n  type: typeof EDIT_BOARD;\n  payload: any;\n}\n\ninterface DeleteBoardAction {\n  type: typeof DELETE_BOARD;\n  payload: string;\n}\n\ninterface AddListAction {\n  type: typeof ADD_LIST;\n  payload: any;\n}\n\ninterface EditListAction {\n  type: typeof EDIT_LIST;\n  payload: any;\n}\n\ninterface DeleteListAction {\n  type: typeof DELETE_LIST;\n  payload: any;\n}\n\ninterface AddTaskAction {\n  type: typeof ADD_TASK;\n  payload: any;\n}\n\ninterface EditTaskAction {\n  type: typeof EDIT_TASK;\n  payload: any;\n}\n\ninterface DeleteTaskAction {\n  type: typeof DELETE_TASK;\n  payload: any;\n}\n\ninterface MoveTaskAction {\n  type: typeof MOVE_TASK;\n  payload: any;\n}\n\nexport type TaskActionTypes =\n  | LoadBoardsAction\n  | LoadBoardAction\n  | AddBoardAction\n  | EditBoardAction\n  | DeleteBoardAction\n  | AddListAction\n  | EditListAction\n  | DeleteListAction\n  | AddTaskAction\n  | EditTaskAction\n  | DeleteTaskAction\n  | MoveTaskAction\n  | LogoutAction;\n","import { applyMiddleware, createStore } from \"redux\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\nimport { AppState, rootReducer } from \"./reducers\";\n\nconst persistConfig = {\n  key: \"main\",\n  storage,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst persistedReducer = persistReducer<AppState, any>(\n  persistConfig,\n  rootReducer\n);\n\nconst middleware = applyMiddleware(thunk);\nconst store = createStore(persistedReducer, middleware);\nconst persistor = persistStore(store);\nexport { store, persistor };\n","import {\n  LOAD_BOARDS,\n  LOAD_BOARD,\n  ADD_BOARD,\n  EDIT_BOARD,\n  DELETE_BOARD,\n  ADD_LIST,\n  EDIT_LIST,\n  DELETE_LIST,\n  ADD_TASK,\n  EDIT_TASK,\n  DELETE_TASK,\n  MOVE_TASK,\n} from \"../types\";\n\nexport const loadBoards = (payload: any) => {\n  return {\n    type: LOAD_BOARDS,\n    payload,\n  };\n};\n\nexport const loadBoard = (payload: any) => {\n  return {\n    type: LOAD_BOARD,\n    payload,\n  };\n};\n\nexport const addBoard = (payload: any) => {\n  return {\n    type: ADD_BOARD,\n    payload,\n  };\n};\n\nexport const editBoard = (payload: any) => {\n  return {\n    type: EDIT_BOARD,\n    payload,\n  };\n};\n\nexport const deleteBoard = (payload: any) => {\n  return {\n    type: DELETE_BOARD,\n    payload,\n  };\n};\n\nexport const addList = (payload: any) => {\n  return {\n    type: ADD_LIST,\n    payload,\n  };\n};\n\nexport const editList = (payload: any) => {\n  return {\n    type: EDIT_LIST,\n    payload,\n  };\n};\n\nexport const deleteList = (payload: any) => {\n  return {\n    type: DELETE_LIST,\n    payload,\n  };\n};\n\nexport const addTask = (payload: any) => {\n  return {\n    type: ADD_TASK,\n    payload,\n  };\n};\n\nexport const editTask = (payload: any) => {\n  return {\n    type: EDIT_TASK,\n    payload,\n  };\n};\n\nexport const deleteTask = (payload: any) => {\n  return {\n    type: DELETE_TASK,\n    payload,\n  };\n};\n\nexport const moveTask = (payload: any) => {\n  return {\n    type: MOVE_TASK,\n    payload,\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { logout } from \"../redux/actions\";\nimport { AppState } from \"../redux/reducers\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n} from \"reactstrap\";\n\ninterface Props {\n  logout: typeof logout;\n}\n\ninterface States {\n  isOpen: boolean;\n}\n\nclass Header extends React.Component<Props, States> {\n  readonly state: States = {\n    isOpen: false,\n  };\n\n  toggle = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  doLogout = () => {\n    this.props.logout();\n  };\n\n  render() {\n    const { isOpen } = this.state;\n    return (\n      <Navbar color=\"light\" light expand=\"md\" fixed=\"top\">\n        <NavbarBrand href=\"/\">Task Board</NavbarBrand>\n        <NavbarToggler onClick={this.toggle} />\n        <Collapse isOpen={isOpen} navbar className=\"justify-content-end\">\n          <Nav navbar>\n            <NavItem>\n              <NavLink\n                to=\"/taskBoard\"\n                className=\"nav-link\"\n                activeClassName=\"active\"\n              >\n                Home\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                to=\"/boards\"\n                className=\"nav-link\"\n                activeClassName=\"active\"\n              >\n                Boards\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                onClick={this.doLogout}\n                exact\n                to=\"#\"\n                className=\"nav-link\"\n                activeClassName=\"logout\"\n              >\n                Logout\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: AppState) => {\n  const { loggedIn } = auth;\n  return { loggedIn };\n};\n\nconst mapDispatchToProps = {\n  logout,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import { LOGIN_SUCCESS, LOGOUT, SET_CURRENT_BOARD, AuthState } from \"../types\";\n\nexport const loginSuccess = (payload: AuthState) => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload,\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: LOGOUT,\n  };\n};\n\nexport const setCurrentBoard = (payload: string) => {\n  return {\n    type: SET_CURRENT_BOARD,\n    payload,\n  };\n};\n","import React from \"react\";\nimport { FormGroup, Label, Input, FormFeedback, InputProps } from \"reactstrap\";\n\nconst TextInput = ({\n  label,\n  type,\n  name,\n  value,\n  onChange,\n  showError,\n  errorMessage,\n}: InputProps) => (\n  <FormGroup>\n    <Label>{label}</Label>\n    <Input\n      type={type}\n      name={name}\n      value={value}\n      onChange={onChange}\n      invalid={showError}\n    />\n    <FormFeedback>{errorMessage}</FormFeedback>\n  </FormGroup>\n);\n\nexport default TextInput;\n","import React from \"react\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\n\ninterface Props {\n  modalOpen: boolean;\n  modalAction: string;\n  modalType: string;\n  submitModal: () => void;\n  closeModal: () => void;\n  deleteAction: () => void;\n  children: React.ReactNode;\n}\n\ninterface States {\n  showDelete: boolean;\n}\n\nclass CrudModal extends React.Component<Props, States> {\n  readonly state: States = {\n    showDelete: false,\n  };\n\n  showDelete = () => {\n    this.setState({ showDelete: true });\n  };\n\n  deleteAction = () => {\n    this.props.deleteAction();\n    this.setState({ showDelete: false });\n  };\n\n  closeDelete = () => {\n    this.setState({ showDelete: false });\n  };\n\n  render() {\n    const {\n      modalOpen,\n      modalAction,\n      modalType,\n      submitModal,\n      closeModal,\n      children,\n    } = this.props;\n\n    return (\n      <div>\n        <Modal isOpen={modalOpen} centered={true}>\n          <ModalHeader toggle={closeModal}>\n            {modalAction} {modalType}\n          </ModalHeader>\n          <ModalBody>{children}</ModalBody>\n          <ModalFooter\n            className={modalAction === \"Edit\" ? \"justify-content-between\" : \"\"}\n          >\n            {modalAction === \"Edit\" && (\n              <Button color=\"primary\" onClick={this.showDelete}>\n                Delete\n              </Button>\n            )}\n            <Button color=\"primary\" onClick={submitModal}>\n              {modalAction === \"Edit\" ? \"Save\" : modalAction}\n            </Button>\n          </ModalFooter>\n        </Modal>\n        <Modal isOpen={this.state.showDelete} centered={true} size=\"sm\">\n          <ModalBody>Are you sure you want to delete?</ModalBody>\n          <ModalFooter centered={true} className=\"justify-content-center\">\n            <Button color=\"primary\" onClick={this.closeDelete}>\n              No\n            </Button>\n            <Button color=\"primary\" onClick={this.deleteAction}>\n              Yes\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default CrudModal;\n","const apiUrl = \"/api/\";\n\nexport const fetchApi = async (\n  endPoint: string,\n  method: string,\n  data: object = {}\n) => {\n  try {\n    const bodyData =\n      method === \"POST\" || method === \"PUT\"\n        ? { body: JSON.stringify(data) }\n        : {};\n\n    const response = await fetch(apiUrl + endPoint, {\n      method: method,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      ...bodyData,\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n    if (err.error) {\n      return { status: false, error: err.error };\n    }\n    return { status: false, error: \"\" };\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport BootstrapTable, { RowSelectionType } from \"react-bootstrap-table-next\";\nimport { loadBoards, addBoard, editBoard, deleteBoard } from \"../redux/actions\";\nimport { BoardState } from \"../redux/types\";\nimport { AppState } from \"../redux/reducers\";\nimport Header from \"../components/Header\";\nimport TextInput from \"../components/TextInput\";\nimport CrudModal from \"../components/CrudModal\";\nimport { fetchApi } from \"../lib/api\";\n\ninterface Props {\n  boards: Array<BoardState>;\n  loadBoards: typeof loadBoards;\n  addBoard: typeof addBoard;\n  editBoard: typeof editBoard;\n  deleteBoard: typeof deleteBoard;\n}\n\ninterface States {\n  boardID: string;\n  boardName: string;\n  modalOpen: boolean;\n  modalAction: string;\n  showError: boolean;\n  errorMessage: string;\n}\n\nclass Boards extends React.Component<Props, States> {\n  readonly state: States = {\n    boardID: \"0\",\n    boardName: \"\",\n    modalOpen: false,\n    modalAction: \"\",\n    showError: false,\n    errorMessage: \"\",\n  };\n\n  componentDidMount() {\n    this.loadBoards();\n  }\n\n  loadBoards = async () => {\n    const apiResult = await fetchApi(\"board\", \"GET\");\n\n    if (apiResult.status === true) {\n      const boards = apiResult.boards;\n      this.props.loadBoards(boards);\n    }\n  };\n\n  submitModal = () => {\n    const { modalAction } = this.state;\n\n    if (modalAction === \"Delete\") {\n      this.deleteBoard();\n    } else if (modalAction === \"Edit\") {\n      this.editBoard();\n    } else {\n      this.createBoard();\n    }\n  };\n\n  deleteBoard = async () => {\n    const { boardID } = this.state;\n    const apiResult = await fetchApi(\"board/\" + boardID, \"DELETE\");\n\n    if (apiResult.status === true) {\n      this.props.deleteBoard(boardID);\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  editBoard = async () => {\n    const { boardID, boardName } = this.state;\n\n    if (boardName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const data = {\n      id: boardID,\n      name: boardName,\n    };\n\n    // send to api\n    const apiResult = await fetchApi(\"board/\" + boardID, \"PUT\", data);\n\n    if (apiResult.status === true) {\n      this.props.editBoard(data);\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Board name in use\" });\n  };\n\n  createBoard = async () => {\n    const { boardName } = this.state;\n\n    if (boardName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"board\", \"POST\", { name: boardName });\n\n    if (apiResult.status === true) {\n      const boardID = apiResult.boardID;\n\n      const data = {\n        id: boardID,\n        name: boardName,\n        taskList: [],\n      };\n\n      this.props.addBoard(data);\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Board name in use\" });\n  };\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const key = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    this.setState<never>({ [key]: value });\n  };\n\n  openCreateModal = () => {\n    this.setState({ modalOpen: true, modalAction: \"Create\" });\n  };\n\n  openEditModal = (row: BoardState) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Edit\",\n      boardID: id,\n      boardName: name,\n    });\n  };\n\n  closeModal = () => {\n    this.setState({\n      modalOpen: false,\n      boardName: \"\",\n      boardID: \"0\",\n      showError: false,\n      errorMessage: \"\",\n    });\n  };\n\n  actionsFormatter = (cell: RowSelectionType, row: BoardState) => {\n    return (\n      <div className=\"btn-actions\">\n        <Button\n          outline\n          color=\"primary\"\n          size=\"sm\"\n          onClick={() => this.openEditModal(row)}\n        >\n          Edit\n        </Button>\n      </div>\n    );\n  };\n\n  render() {\n    const { boardName, modalOpen, modalAction } = this.state;\n    const { boards } = this.props;\n    const columns = [\n      {\n        dataField: \"name\",\n        text: \"Board Name\",\n        sort: true,\n      },\n      {\n        dataField: \"actions\",\n        text: \"Actions\",\n        isDummyField: true,\n        formatter: this.actionsFormatter,\n        headerStyle: () => {\n          return { width: \"130px\" };\n        },\n      },\n    ];\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"section\">\n          <div className=\"d-inline-block mb-2\">\n            <h3>Boards </h3>\n          </div>\n          <Button\n            color=\"success\"\n            className=\"float-right\"\n            onClick={this.openCreateModal}\n          >\n            Create Board\n          </Button>\n          <BootstrapTable\n            bootstrap4\n            keyField=\"id\"\n            data={boards}\n            columns={columns}\n          />\n        </div>\n        <CrudModal\n          modalOpen={modalOpen}\n          modalAction={modalAction}\n          modalType=\"Board\"\n          deleteAction={this.deleteBoard}\n          submitModal={this.submitModal}\n          closeModal={this.closeModal}\n        >\n          {modalAction === \"Delete\" ? (\n            <p>Board: {boardName}</p>\n          ) : (\n            <TextInput\n              name=\"boardName\"\n              label=\"Select Board\"\n              type=\"text\"\n              value={boardName}\n              onChange={this.onChange}\n              showError={this.state.showError}\n              errorMessage={this.state.errorMessage}\n            />\n          )}\n        </CrudModal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ task }: AppState) => {\n  const { boards } = task;\n  return { boards };\n};\n\nconst mapDispatchToProps = {\n  loadBoards,\n  addBoard,\n  editBoard,\n  deleteBoard,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Boards);\n","import React from \"react\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\n\ninterface OptionTypes {\n  id: string;\n  name: string;\n}\n\ninterface MyProps {\n  name: string;\n  label: string;\n  value: string;\n  selectLabel: string;\n  options: Array<OptionTypes>;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst SelectInput = ({\n  label,\n  name,\n  value,\n  selectLabel,\n  options,\n  onChange,\n}: MyProps) => (\n  <FormGroup>\n    <Label>{label}</Label>\n    <Input type=\"select\" name={name} value={value} onChange={onChange}>\n      <option value=\"0\">{selectLabel}</option>\n      {options.map((row: OptionTypes, index: number) => {\n        return (\n          <option value={row.id} key={index}>\n            {row.name}\n          </option>\n        );\n      })}\n    </Input>\n  </FormGroup>\n);\n\nexport default SelectInput;\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\ninterface MyProps {\n  id: string;\n  name: string;\n  index: number;\n  editTask: () => void;\n}\n\nconst grid = 8;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n  position: \"relative\",\n  userSelect: \"none\",\n  padding: `${grid * 2}px ${grid}px`,\n  margin: `0 0 ${grid}px 0`,\n  background: \"#FFF\",\n  boxShadow: \"0 1px 1px rgba(0,0,0, .20)\",\n  border: \"1px solid #fff\",\n  ...draggableStyle,\n});\n\nconst TaskItem = ({ id, name, index, editTask }: MyProps) => (\n  <Draggable key={id} draggableId={id} index={index}>\n    {(provided, snapshot) => (\n      <div\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n        onClick={editTask}\n      >\n        <span className=\"btn-span\">{name}</span>\n      </div>\n    )}\n  </Draggable>\n);\n\nexport default TaskItem;\n","import React from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport { Button } from \"reactstrap\";\nimport TaskItem from \"./TaskItem\";\nimport { TaskItemState } from \"../redux/types\";\n\ninterface MyProps {\n  name: string;\n  id: string;\n  tasks: Array<TaskItemState>;\n  showEdit: () => void;\n  showAddTask: () => void;\n  showEditTask: (task: TaskItemState) => void;\n}\n\nconst grid = 8;\n\nconst getListStyle = (isDraggingOver: boolean) => ({\n  background: isDraggingOver ? \"lightblue\" : \"#f3f5f7\",\n  borderRadius: \"4px\",\n  border: \"1px solid #eee\",\n  padding: grid,\n  width: 300,\n  minWidth: 300,\n  marginRight: 10,\n  marginBottom: 30,\n});\n\nconst TaskList = ({\n  id,\n  name,\n  tasks,\n  showEdit,\n  showAddTask,\n  showEditTask,\n}: MyProps) => (\n  <Droppable droppableId={id}>\n    {(provided, snapshot) => (\n      <div\n        ref={provided.innerRef}\n        className=\"relative\"\n        style={getListStyle(snapshot.isDraggingOver)}\n        {...provided.droppableProps}\n      >\n        <div className=\"tasklist-header\" onClick={showEdit}>\n          <h4>{name}</h4>\n        </div>\n        <div className=\"task-container\">\n          {tasks &&\n            tasks.map((task: TaskItemState, index: number) => (\n              <TaskItem\n                key={index}\n                id={task.id}\n                name={task.name}\n                index={index}\n                editTask={() => showEditTask(task)}\n              />\n            ))}\n          {provided.placeholder}\n        </div>\n        <div className=\"bottom-task-actions\">\n          <Button color=\"success\" onClick={showAddTask}>\n            Add Task\n          </Button>\n        </div>\n      </div>\n    )}\n  </Droppable>\n);\n\nexport default TaskList;\n","export const reorderArray = (\n  list: Array<object>,\n  startIndex: number,\n  endIndex: number\n) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nexport const moveArray = (\n  source: Array<object>,\n  destination: Array<object>,\n  startIndex: number,\n  endIndex: number\n) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(startIndex, 1);\n\n  destClone.splice(endIndex, 0, removed);\n\n  const result = { sourceItems: sourceClone, destinationItems: destClone };\n  return result;\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport {\n  addList,\n  editList,\n  deleteList,\n  addTask,\n  editTask,\n  deleteTask,\n  loadBoard,\n  loadBoards,\n  moveTask,\n  setCurrentBoard,\n} from \"../redux/actions\";\nimport { BoardState, TaskListState, TaskItemState } from \"../redux/types\";\nimport { AppState } from \"../redux/reducers\";\nimport Header from \"../components/Header\";\nimport SelectInput from \"../components/SelectInput\";\nimport TextInput from \"../components/TextInput\";\nimport TaskList from \"../components/TaskList\";\nimport CrudModal from \"../components/CrudModal\";\nimport { fetchApi } from \"../lib/api\";\nimport { reorderArray, moveArray } from \"../lib/tools\";\n\ninterface Props {\n  currentBoardID: string;\n  currentBoard: BoardState;\n  boards: Array<BoardState>;\n  setCurrentBoard: typeof setCurrentBoard;\n  addList: typeof addList;\n  editList: typeof editList;\n  deleteList: typeof deleteList;\n  addTask: typeof addTask;\n  editTask: typeof editTask;\n  deleteTask: typeof deleteTask;\n  moveTask: typeof moveTask;\n  loadBoard: typeof loadBoard;\n  loadBoards: typeof loadBoards;\n}\n\ninterface States {\n  listID: string;\n  listName: string;\n  taskID: string;\n  taskName: string;\n  modalOpen: boolean;\n  modalAction: string;\n  modalType: string;\n  showError: boolean;\n  errorMessage: string;\n}\n\nclass TaskBoard extends React.Component<Props, States> {\n  readonly state: States = {\n    listID: \"0\",\n    listName: \"\",\n    taskID: \"0\",\n    taskName: \"\",\n    modalOpen: false,\n    modalAction: \"\",\n    modalType: \"\",\n    showError: false,\n    errorMessage: \"\",\n  };\n\n  componentDidMount() {\n    this.loadDefaultBoard();\n  }\n\n  submitModal = () => {\n    const { modalAction, modalType } = this.state;\n\n    if (modalType === \"Task\") {\n      if (modalAction === \"Edit\") {\n        this.editTask();\n      } else {\n        this.createTask();\n      }\n    } else {\n      if (modalAction === \"Edit\") {\n        this.editList();\n      } else {\n        this.createList();\n      }\n    }\n  };\n\n  deleteList = async () => {\n    const { currentBoardID } = this.props;\n    const { listID } = this.state;\n\n    const apiResult = await fetchApi(\"taskList/\" + listID, \"DELETE\");\n\n    if (apiResult.status === true) {\n      const data = {\n        boardID: currentBoardID,\n        id: listID,\n      };\n      this.props.deleteList(data);\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  editList = async () => {\n    const { currentBoardID } = this.props;\n    const { listID, listName } = this.state;\n\n    if (listName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"taskList/\" + listID, \"PUT\", {\n      name: listName,\n    });\n\n    if (apiResult.status === true) {\n      const data = {\n        id: listID,\n        name: listName,\n        tasks: [],\n      };\n\n      this.props.editList({ boardID: currentBoardID, taskList: data });\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  createList = async () => {\n    const { currentBoardID } = this.props;\n    const { listName } = this.state;\n\n    if (listName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"taskList\", \"POST\", {\n      name: listName,\n      boardID: currentBoardID,\n    });\n\n    if (apiResult.status === true) {\n      const taskListID = apiResult.taskListID;\n\n      const data = {\n        id: taskListID,\n        name: listName,\n        tasks: [],\n      };\n\n      this.props.addList({ boardID: currentBoardID, taskList: data });\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  deleteTask = async () => {\n    const { currentBoardID } = this.props;\n    const { listID, taskID } = this.state;\n\n    const apiResult = await fetchApi(\"task/\" + taskID, \"DELETE\");\n\n    if (apiResult.status === true) {\n      const data = {\n        boardID: currentBoardID,\n        listID: listID,\n        id: taskID,\n      };\n      this.props.deleteTask(data);\n      this.closeModal();\n      return true;\n    }\n\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  editTask = async () => {\n    const { currentBoardID } = this.props;\n    const { listID, taskID, taskName } = this.state;\n\n    if (taskName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"task/\" + taskID, \"PUT\", {\n      name: taskName,\n    });\n\n    if (apiResult.status === true) {\n      const data = {\n        boardID: currentBoardID,\n        listID: listID,\n        id: taskID,\n        name: taskName,\n      };\n\n      this.props.editTask(data);\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  createTask = async () => {\n    const { currentBoardID } = this.props;\n    const { listID, taskName } = this.state;\n\n    if (taskName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"task\", \"POST\", {\n      name: taskName,\n      listID: listID,\n    });\n\n    if (apiResult.status === true) {\n      const taskID = apiResult.taskID;\n\n      const data = {\n        id: taskID,\n        name: taskName,\n      };\n\n      this.props.addTask({\n        boardID: currentBoardID,\n        listID: listID,\n        task: data,\n      });\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  openCreateModal = () => {\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Create\",\n      modalType: \"List\",\n    });\n  };\n\n  openCreateTaskModal = (row: TaskListState) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Create\",\n      modalType: \"Task\",\n      listID: id,\n      listName: name,\n    });\n  };\n\n  openEditModal = (row: TaskListState) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Edit\",\n      modalType: \"List\",\n      listID: id,\n      listName: name,\n    });\n  };\n\n  openEditTaskModal = (row: TaskListState, task: TaskItemState) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Edit\",\n      modalType: \"Task\",\n      listID: id,\n      listName: name,\n      taskID: task.id,\n      taskName: task.name,\n    });\n  };\n\n  closeModal = () => {\n    this.setState({\n      modalOpen: false,\n      modalType: \"\",\n      listName: \"\",\n      listID: \"0\",\n      taskID: \"0\",\n      taskName: \"\",\n      showError: false,\n      errorMessage: \"\",\n    });\n  };\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const key = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    this.setState<never>({ [key]: value });\n  };\n\n  onDefaultBoardChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const boardID = event.currentTarget.value;\n    this.props.setCurrentBoard(boardID);\n    this.loadBoard(boardID);\n  };\n\n  loadDefaultBoard = () => {\n    const { currentBoardID } = this.props;\n    this.loadBoard(currentBoardID);\n  };\n\n  loadBoard = async (boardID: string) => {\n    if (boardID === \"0\") {\n      this.loadBoards();\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"board/\" + boardID, \"GET\");\n\n    if (apiResult.status === true && apiResult.board) {\n      const board = apiResult.board;\n      this.props.loadBoard(board);\n    }\n  };\n\n  loadBoards = async () => {\n    const apiResult = await fetchApi(\"board\", \"GET\");\n\n    if (apiResult.status === true) {\n      const boards = apiResult.boards;\n      this.props.loadBoards(boards);\n    }\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { currentBoardID, currentBoard } = this.props;\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      console.log(\"Dropped outside\");\n      return;\n    }\n\n    const taskLists = currentBoard.taskList;\n    const sourceID = source.droppableId;\n    const destinationID = destination.droppableId;\n    const sourceIndex = source.index;\n    const destinationIndex = destination.index;\n\n    const data = {\n      sourceID,\n      destinationID,\n      sourceIndex,\n      destinationIndex,\n    };\n\n    // same list.\n    if (source.droppableId === destination.droppableId) {\n      // get tasklist.\n      const tasks = getTasks(taskLists, destinationID);\n      // reorder items.\n      const newTasks = reorderArray(tasks, sourceIndex, destinationIndex);\n      // update redux\n      this.props.moveTask({\n        boardID: currentBoardID,\n        id: destinationID,\n        tasks: newTasks,\n      });\n\n      fetchApi(\"taskList/updateOrder\", \"POST\", data);\n      return;\n    }\n\n    const sourceList = getTasks(taskLists, sourceID);\n    const destinationList = getTasks(taskLists, destinationID);\n\n    // new list\n    const moveResult = moveArray(\n      sourceList,\n      destinationList,\n      sourceIndex,\n      destinationIndex\n    );\n\n    const { sourceItems, destinationItems } = moveResult;\n\n    // update redux source items\n    this.props.moveTask({\n      boardID: currentBoardID,\n      id: sourceID,\n      tasks: sourceItems,\n    });\n\n    // update redux destination items\n    this.props.moveTask({\n      boardID: currentBoardID,\n      id: destinationID,\n      tasks: destinationItems,\n    });\n\n    fetchApi(\"taskList/updateOrder\", \"POST\", data);\n  };\n\n  render() {\n    const { boards, currentBoardID, currentBoard } = this.props;\n    const {\n      listName,\n      taskName,\n      modalOpen,\n      modalAction,\n      modalType,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"board-tools\">\n          <div className=\"select-board\">\n            <SelectInput\n              name=\"defaultBoard\"\n              label=\"Board Name\"\n              value={currentBoardID}\n              selectLabel=\"Select Board\"\n              options={boards}\n              onChange={this.onDefaultBoardChange}\n            />\n          </div>\n          {this.props.currentBoardID !== \"0\" && (\n            <Button color=\"success\" onClick={this.openCreateModal}>\n              Create List\n            </Button>\n          )}\n        </div>\n        <div className=\"d-flex ml-2\">\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            {currentBoard &&\n              currentBoard.taskList &&\n              currentBoard.taskList.map(\n                (list: TaskListState, index: number) => {\n                  return (\n                    <TaskList\n                      key={index}\n                      id={list.id}\n                      name={list.name}\n                      tasks={list.tasks}\n                      showEdit={() => this.openEditModal(list)}\n                      showAddTask={() => this.openCreateTaskModal(list)}\n                      showEditTask={(task: TaskItemState) =>\n                        this.openEditTaskModal(list, task)\n                      }\n                    />\n                  );\n                }\n              )}\n          </DragDropContext>\n        </div>\n        <CrudModal\n          modalOpen={modalOpen}\n          modalAction={modalAction}\n          modalType={modalType}\n          deleteAction={\n            modalType === \"List\" ? this.deleteList : this.deleteTask\n          }\n          submitModal={this.submitModal}\n          closeModal={this.closeModal}\n        >\n          <div>\n            {modalType === \"List\" ? (\n              <div>\n                <TextInput\n                  name=\"listName\"\n                  label=\"List Name\"\n                  type=\"text\"\n                  value={listName}\n                  onChange={this.onChange}\n                  showError={this.state.showError}\n                  errorMessage=\"Please enter a name\"\n                />\n              </div>\n            ) : (\n              <div>\n                <p>List {listName}</p>\n                <TextInput\n                  name=\"taskName\"\n                  label=\"Task Name\"\n                  type=\"text\"\n                  value={taskName}\n                  onChange={this.onChange}\n                  showError={this.state.showError}\n                  errorMessage={this.state.errorMessage}\n                />\n              </div>\n            )}\n          </div>\n        </CrudModal>\n      </div>\n    );\n  }\n}\n\nconst getTasks = (taskLists: Array<TaskListState>, taskListID: string) => {\n  const row = taskLists.filter(\n    (taskList: TaskListState) => taskList.id === taskListID\n  )[0];\n  const tasks = row == null ? [] : row.tasks;\n  return tasks;\n};\n\nconst getCurrentBoard = (boards: Array<BoardState>, boardID: string) => {\n  const currentBoard = boards.filter(\n    (board: BoardState) => board.id === boardID\n  )[0];\n  return currentBoard;\n};\n\nconst mapStateToProps = ({ task, auth }: AppState) => {\n  const { boards } = task;\n  const { currentBoardID } = auth;\n  const currentBoard = getCurrentBoard(boards, currentBoardID);\n\n  return { boards, currentBoardID, currentBoard };\n};\n\nconst mapDispatchToProps = {\n  addList,\n  editList,\n  deleteList,\n  addTask,\n  editTask,\n  deleteTask,\n  loadBoard,\n  loadBoards,\n  moveTask,\n  setCurrentBoard,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskBoard);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport { loginSuccess } from \"../redux/actions\";\nimport { AuthState } from \"../redux/types\";\nimport { AppState } from \"../redux/reducers\";\nimport TextInput from \"../components/TextInput\";\n\ninterface Props {\n  loggedIn: boolean;\n  loginSuccess: typeof loginSuccess;\n}\n\ninterface States {\n  username: string;\n  password: string;\n  showError: boolean;\n  errorInput: string;\n}\n\nclass Login extends React.Component<Props, States> {\n  readonly state: States = {\n    username: \"demo\",\n    password: \"demo\",\n    showError: false,\n    errorInput: \"\",\n  };\n\n  checkLogin = () => {\n    const { username, password } = this.state;\n\n    if (username === \"\") {\n      this.setState({ showError: true, errorInput: \"username\" });\n      return false;\n    }\n    if (password === \"\") {\n      this.setState({ showError: true, errorInput: \"password\" });\n      return false;\n    }\n\n    if (username === \"demo\" && password === \"demo\") {\n      const user: AuthState = {\n        id: \"demo\",\n        username: \"demo\",\n        token: \"demo\",\n        currentBoardID: \"0\",\n        loggedIn: true,\n      };\n      this.props.loginSuccess(user);\n      return true;\n    }\n\n    // show fail\n  };\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const key = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    this.setState<never>({ [key]: value });\n  };\n\n  render() {\n    const { username, password } = this.state;\n    return (\n      <div className=\"login-form\">\n        <h1 className=\"pb-4\">\n          <span className=\"font-weight-bold\">Task Board</span>\n        </h1>\n        <TextInput\n          name=\"username\"\n          label=\"Username\"\n          type=\"text\"\n          value={username}\n          onChange={this.onChange}\n          showError={\n            this.state.errorInput === \"username\" && this.state.showError\n          }\n          errorMessage=\"Please enter a username\"\n        />\n        <TextInput\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          value={password}\n          onChange={this.onChange}\n          showError={\n            this.state.errorInput === \"password\" && this.state.showError\n          }\n          errorMessage=\"Please enter a password\"\n        />\n        <Button\n          className=\"btn-lg btn-dark btn-block mt-4\"\n          onClick={this.checkLogin}\n        >\n          Login\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: AppState) => {\n  const { loggedIn } = auth;\n  return { loggedIn };\n};\n\nconst mapDispatchToProps = {\n  loginSuccess,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from \"react\";\nimport { Route, Redirect, RouteProps } from \"react-router-dom\";\n\ninterface Props extends RouteProps {\n  loggedIn: boolean;\n}\n\nconst LoginRoute = ({ loggedIn, ...props }: Props) =>\n  loggedIn ? <Redirect to=\"/taskBoard\" /> : <Route {...props} />;\n\nexport default LoginRoute;\n","import React from \"react\";\nimport { Route, Redirect, RouteProps } from \"react-router-dom\";\n\ninterface Props extends RouteProps {\n  loggedIn: boolean;\n}\n\nconst ProtectedRoute = ({ loggedIn, ...props }: Props) =>\n  loggedIn ? <Route {...props} /> : <Redirect to=\"/\" />;\n\nexport default ProtectedRoute;\n","import React from \"react\";\nimport { HashRouter, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Boards from \"./scenes/Boards\";\nimport TaskBoard from \"./scenes/TaskBoard\";\nimport Login from \"./scenes/Login\";\nimport LoginRoute from \"./components/LoginRoute\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\nimport { AppState } from \"./redux/reducers\";\n\ninterface Props {\n  loggedIn: boolean;\n}\n\nclass Router extends React.Component<Props> {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <LoginRoute\n            exact\n            path=\"/\"\n            component={Login}\n            loggedIn={this.props.loggedIn}\n          />\n          <ProtectedRoute\n            path=\"/taskBoard\"\n            component={TaskBoard}\n            loggedIn={this.props.loggedIn}\n          />\n          <ProtectedRoute\n            path=\"/boards\"\n            component={Boards}\n            loggedIn={this.props.loggedIn}\n          />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: AppState) => {\n  const { loggedIn } = auth;\n  return { loggedIn };\n};\n\nexport default connect(mapStateToProps, undefined)(Router);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\nimport Router from \"./Router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"./assets/css/App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Router loggedIn={true} />\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}