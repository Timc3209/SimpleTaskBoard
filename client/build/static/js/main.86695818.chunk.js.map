{"version":3,"sources":["redux/reducers/authReducer.ts","redux/reducers/taskReducer.ts","redux/reducers/index.ts","redux/types/authTypes.ts","redux/types/taskTypes.ts","redux/store.ts","redux/actions/authActions.ts","redux/actions/taskActions.ts","components/Header.tsx","components/TextInput.tsx","components/CrudModal.tsx","lib/api.ts","scenes/Boards.tsx","components/SelectInput.tsx","components/TaskItem.tsx","components/TaskList.tsx","lib/tools.ts","scenes/TaskBoard.tsx","scenes/Login.tsx","components/LoginRoute.tsx","components/ProtectedRoute.tsx","Router.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["INITIAL_STATE","id","username","token","currentBoardID","loggedIn","boards","rootReducer","combineReducers","auth","state","action","type","payload","task","map","board","name","filter","boardID","taskList","list","listID","tasks","persistConfig","key","storage","persistedReducer","persistReducer","middleware","applyMiddleware","thunk","store","createStore","persistor","persistStore","loginSuccess","logout","loadBoards","Header","isOpen","toggle","setState","this","props","Navbar","color","dark","expand","fixed","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","className","Nav","NavItem","to","activeClassName","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","DropdownItem","React","Component","mapDispatchToProps","connect","TextInput","label","value","onChange","showError","errorMessage","rows","maxLength","FormGroup","Label","Input","invalid","FormFeedback","CrudModal","showDelete","deleteAction","closeDelete","modalOpen","modalAction","modalType","submitModal","closeModal","children","Modal","centered","ModalHeader","ModalBody","ModalFooter","Button","size","fetchApi","endPoint","method","a","data","getState","authToken","dispatch","status","error","bodyData","body","JSON","stringify","fetch","headers","Accept","authorization","response","json","console","log","fetchData","Boards","boardName","apiResult","deleteBoard","editBoard","createBoard","addBoard","event","currentTarget","openCreateModal","openEditModal","row","actionsFormatter","cell","outline","columns","dataField","text","sort","isDummyField","formatter","headerStyle","width","bootstrap4","keyField","SelectInput","selectLabel","options","index","TaskItem","editTask","draggableId","provided","snapshot","ref","innerRef","draggableProps","dragHandleProps","style","isDragging","draggableStyle","position","userSelect","padding","margin","background","boxShadow","border","TaskList","showEdit","showAddTask","showEditTask","droppableId","isDraggingOver","borderRadius","minWidth","marginRight","marginBottom","droppableProps","icon","faPlus","placeholder","reorderArray","startIndex","endIndex","result","Array","from","splice","removed","moveArray","source","destination","sourceClone","destClone","sourceItems","destinationItems","TaskBoard","listName","taskID","taskName","checkAuth","user","currentBoard","authData","loadBoard","createTask","editList","createList","deleteList","taskListID","addList","deleteTask","addTask","openCreateTaskModal","openEditTaskModal","onDefaultBoardChange","setCurrentBoard","onDragEnd","taskLists","sourceID","destinationID","sourceIndex","destinationIndex","getTasks","newTasks","moveTask","sourceList","destinationList","moveResult","getCurrentBoard","Login","password","errorInput","checkLogin","LoginRoute","ProtectedRoute","Router","exact","path","component","undefined","App","loading","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.86695818.chunk.js","sourcesContent":["import {\n  LOGIN_SUCCESS,\n  LOGOUT,\n  SET_CURRENT_BOARD,\n  AuthState,\n  AuthActionTypes,\n} from \"../types\";\n\nexport const INITIAL_STATE: AuthState = {\n  id: \"0\",\n  username: \"\",\n  token: \"\",\n  currentBoardID: \"0\",\n  loggedIn: false,\n};\n\nexport const INITIAL_STATE_LOGGED: AuthState = {\n  id: \"demo\",\n  username: \"demo\",\n  token: \"demo\",\n  currentBoardID: \"0\",\n  loggedIn: true,\n};\n\nexport function reducer(state = INITIAL_STATE, action: AuthActionTypes) {\n  switch (action.type) {\n    case LOGIN_SUCCESS:\n      return {\n        ...state,\n        id: action.payload.id,\n        username: action.payload.username,\n        token: action.payload.token,\n        currentBoardID: action.payload.currentBoardID,\n        loggedIn: action.payload.loggedIn,\n      };\n    case SET_CURRENT_BOARD:\n      return {\n        ...state,\n        currentBoardID: action.payload,\n      };\n    case LOGOUT:\n      return { ...INITIAL_STATE };\n    default:\n      return state;\n  }\n}\n","import {\n  LOAD_BOARDS,\n  LOAD_BOARD,\n  ADD_BOARD,\n  EDIT_BOARD,\n  DELETE_BOARD,\n  ADD_TASK,\n  EDIT_TASK,\n  DELETE_TASK,\n  MOVE_TASK,\n  ADD_LIST,\n  EDIT_LIST,\n  DELETE_LIST,\n  LOGOUT,\n  TaskState,\n  TaskActionTypes,\n  BoardState,\n  TaskListState,\n  TaskItemState,\n} from \"../types\";\n\nexport const INITIAL_STATE: TaskState = {\n  boards: [],\n};\n\nexport function reducer(state = INITIAL_STATE, action: TaskActionTypes) {\n  switch (action.type) {\n    case LOAD_BOARDS:\n      return {\n        ...state,\n        boards: action.payload,\n      };\n    case ADD_BOARD:\n      return {\n        ...state,\n        boards: [...state.boards, action.payload],\n      };\n    case EDIT_BOARD:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.id\n            ? { ...board, name: action.payload.name }\n            : board\n        ),\n      };\n    case DELETE_BOARD:\n      return {\n        ...state,\n        boards: state.boards.filter(\n          (board: BoardState) => board.id !== action.payload\n        ),\n      };\n    case ADD_LIST:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: [...board.taskList, action.payload.taskList],\n              }\n            : board\n        ),\n      };\n    case EDIT_LIST:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: TaskListState) =>\n                  list.id === action.payload.taskList.id\n                    ? { ...list, name: action.payload.taskList.name }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case DELETE_LIST:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.filter(\n                  (list: TaskListState) => list.id !== action.payload.id\n                ),\n              }\n            : board\n        ),\n      };\n    case ADD_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: TaskListState) =>\n                  list.id === action.payload.listID\n                    ? { ...list, tasks: [...list.tasks, action.payload.task] }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case EDIT_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: TaskListState) =>\n                  list.id === action.payload.listID\n                    ? {\n                        ...list,\n                        tasks: list.tasks.map((task: TaskItemState) =>\n                          task.id === action.payload.id\n                            ? { ...task, name: action.payload.name }\n                            : task\n                        ),\n                      }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case DELETE_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: TaskListState) =>\n                  list.id === action.payload.listID\n                    ? {\n                        ...list,\n                        tasks: list.tasks.filter(\n                          (task: TaskItemState) => task.id !== action.payload.id\n                        ),\n                      }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case LOAD_BOARD:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.id\n            ? {\n                ...board,\n                name: action.payload.name,\n                taskList: action.payload.taskList,\n              }\n            : board\n        ),\n      };\n    case MOVE_TASK:\n      return {\n        ...state,\n        boards: state.boards.map((board: BoardState) =>\n          board.id === action.payload.boardID\n            ? {\n                ...board,\n                taskList: board.taskList.map((list: TaskListState) =>\n                  list.id === action.payload.id\n                    ? { ...list, tasks: action.payload.tasks }\n                    : list\n                ),\n              }\n            : board\n        ),\n      };\n    case LOGOUT:\n      return { ...INITIAL_STATE };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from \"redux\";\nimport * as authReducer from \"./authReducer\";\nimport * as taskReducer from \"./taskReducer\";\nimport { AuthState, TaskState } from \"../types\";\n\nexport interface AppState {\n  auth: AuthState;\n  task: TaskState;\n}\n\nexport const AppInitialState: AppState = {\n  auth: authReducer.INITIAL_STATE,\n  task: taskReducer.INITIAL_STATE,\n};\n\nexport const AppInitialStateLogged: AppState = {\n  auth: authReducer.INITIAL_STATE_LOGGED,\n  task: taskReducer.INITIAL_STATE,\n};\n\nexport const rootReducer = combineReducers({\n  auth: authReducer.reducer,\n  task: taskReducer.reducer,\n});\n","export const LOGIN_SUCCESS = \"LOGIN_SUCCESS\";\nexport const LOGOUT = \"LOGOUT\";\nexport const SET_CURRENT_BOARD = \"SET_CURRENT_BOARD\";\n\nexport interface AuthState {\n  id: string;\n  username: string;\n  token: string;\n  currentBoardID: string;\n  loggedIn: boolean;\n}\n\ninterface LoginSuccessAction {\n  type: typeof LOGIN_SUCCESS;\n  payload: AuthState;\n}\n\ninterface SetCurrentBoardAction {\n  type: typeof SET_CURRENT_BOARD;\n  payload: string;\n}\n\nexport interface LogoutAction {\n  type: typeof LOGOUT;\n}\n\nexport type AuthActionTypes =\n  | LoginSuccessAction\n  | LogoutAction\n  | SetCurrentBoardAction;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { LogoutAction } from \"../types\";\nexport const LOAD_BOARDS = \"LOAD_BOARDS\";\nexport const LOAD_BOARD = \"LOAD_BOARD\";\nexport const ADD_BOARD = \"ADD_BOARD\";\nexport const EDIT_BOARD = \"EDIT_BOARD\";\nexport const DELETE_BOARD = \"DELETE_BOARD\";\nexport const ADD_LIST = \"ADD_LIST\";\nexport const EDIT_LIST = \"EDIT_LIST\";\nexport const DELETE_LIST = \"DELETE_LIST\";\nexport const ADD_TASK = \"ADD_TASK\";\nexport const EDIT_TASK = \"EDIT_TASK\";\nexport const DELETE_TASK = \"DELETE_TASK\";\nexport const MOVE_TASK = \"MOVE_TASK\";\n\nexport interface TaskItemState {\n  id: string;\n  name: string;\n  sortOrder: number;\n}\n\nexport interface TaskListState {\n  id: string;\n  name: string;\n  tasks: Array<TaskItemState>;\n}\n\nexport interface BoardState {\n  id: string;\n  name: string;\n  taskList: Array<TaskListState>;\n}\n\nexport interface TaskState {\n  boards: Array<BoardState>;\n}\n\ninterface LoadBoardsAction {\n  type: typeof LOAD_BOARDS;\n  payload: any;\n}\n\ninterface LoadBoardAction {\n  type: typeof LOAD_BOARD;\n  payload: any;\n}\n\ninterface AddBoardAction {\n  type: typeof ADD_BOARD;\n  payload: any;\n}\n\ninterface EditBoardAction {\n  type: typeof EDIT_BOARD;\n  payload: any;\n}\n\ninterface DeleteBoardAction {\n  type: typeof DELETE_BOARD;\n  payload: string;\n}\n\ninterface AddListAction {\n  type: typeof ADD_LIST;\n  payload: any;\n}\n\ninterface EditListAction {\n  type: typeof EDIT_LIST;\n  payload: any;\n}\n\ninterface DeleteListAction {\n  type: typeof DELETE_LIST;\n  payload: any;\n}\n\ninterface AddTaskAction {\n  type: typeof ADD_TASK;\n  payload: any;\n}\n\ninterface EditTaskAction {\n  type: typeof EDIT_TASK;\n  payload: any;\n}\n\ninterface DeleteTaskAction {\n  type: typeof DELETE_TASK;\n  payload: any;\n}\n\ninterface MoveTaskAction {\n  type: typeof MOVE_TASK;\n  payload: any;\n}\n\nexport type TaskActionTypes =\n  | LoadBoardsAction\n  | LoadBoardAction\n  | AddBoardAction\n  | EditBoardAction\n  | DeleteBoardAction\n  | AddListAction\n  | EditListAction\n  | DeleteListAction\n  | AddTaskAction\n  | EditTaskAction\n  | DeleteTaskAction\n  | MoveTaskAction\n  | LogoutAction;\n","import { applyMiddleware, createStore } from \"redux\";\nimport { persistReducer, persistStore } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport thunk from \"redux-thunk\";\nimport { AppState, rootReducer } from \"./reducers\";\n\nconst persistConfig = {\n  key: \"main\",\n  storage,\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst persistedReducer = persistReducer<AppState, any>(\n  persistConfig,\n  rootReducer\n);\n\nconst middleware = applyMiddleware(thunk);\nconst store = createStore(persistedReducer, middleware);\nconst persistor = persistStore(store);\nexport { store, persistor };\n","import { LOGIN_SUCCESS, LOGOUT, SET_CURRENT_BOARD, AuthState } from \"../types\";\n\nexport const loginSuccess = (payload: AuthState) => {\n  return {\n    type: LOGIN_SUCCESS,\n    payload,\n  };\n};\n\nexport const logout = () => {\n  return {\n    type: LOGOUT,\n  };\n};\n\nexport const setCurrentBoard = (payload: string) => {\n  return {\n    type: SET_CURRENT_BOARD,\n    payload,\n  };\n};\n","import {\n  LOAD_BOARDS,\n  LOAD_BOARD,\n  ADD_BOARD,\n  EDIT_BOARD,\n  DELETE_BOARD,\n  ADD_LIST,\n  EDIT_LIST,\n  DELETE_LIST,\n  ADD_TASK,\n  EDIT_TASK,\n  DELETE_TASK,\n  MOVE_TASK,\n} from \"../types\";\n\nexport const loadBoards = (payload: any) => {\n  return {\n    type: LOAD_BOARDS,\n    payload,\n  };\n};\n\nexport const loadBoard = (payload: any) => {\n  return {\n    type: LOAD_BOARD,\n    payload,\n  };\n};\n\nexport const addBoard = (payload: any) => {\n  return {\n    type: ADD_BOARD,\n    payload,\n  };\n};\n\nexport const editBoard = (payload: any) => {\n  return {\n    type: EDIT_BOARD,\n    payload,\n  };\n};\n\nexport const deleteBoard = (payload: any) => {\n  return {\n    type: DELETE_BOARD,\n    payload,\n  };\n};\n\nexport const addList = (payload: any) => {\n  return {\n    type: ADD_LIST,\n    payload,\n  };\n};\n\nexport const editList = (payload: any) => {\n  return {\n    type: EDIT_LIST,\n    payload,\n  };\n};\n\nexport const deleteList = (payload: any) => {\n  return {\n    type: DELETE_LIST,\n    payload,\n  };\n};\n\nexport const addTask = (payload: any) => {\n  return {\n    type: ADD_TASK,\n    payload,\n  };\n};\n\nexport const editTask = (payload: any) => {\n  return {\n    type: EDIT_TASK,\n    payload,\n  };\n};\n\nexport const deleteTask = (payload: any) => {\n  return {\n    type: DELETE_TASK,\n    payload,\n  };\n};\n\nexport const moveTask = (payload: any) => {\n  return {\n    type: MOVE_TASK,\n    payload,\n  };\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { NavLink } from \"react-router-dom\";\nimport { logout } from \"../redux/actions\";\nimport { AppState } from \"../redux/reducers\";\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n} from \"reactstrap\";\n\ninterface Props {\n  logout: typeof logout;\n  username: string;\n}\n\ninterface States {\n  isOpen: boolean;\n}\n\nclass Header extends React.Component<Props, States> {\n  readonly state: States = {\n    isOpen: false,\n  };\n\n  toggle = () => {\n    this.setState({ isOpen: !this.state.isOpen });\n  };\n\n  render() {\n    const { isOpen } = this.state;\n    const { username, logout } = this.props;\n    return (\n      <Navbar color=\"dark\" dark expand=\"md\" fixed=\"top\">\n        <NavbarBrand href=\"/\">Task Board</NavbarBrand>\n        <NavbarToggler onClick={this.toggle} />\n        <Collapse isOpen={isOpen} navbar className=\"justify-content-end\">\n          <Nav navbar>\n            <NavItem>\n              <NavLink\n                to=\"/taskBoard\"\n                className=\"nav-link\"\n                activeClassName=\"active\"\n              >\n                Home\n              </NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink\n                to=\"/boards\"\n                className=\"nav-link\"\n                activeClassName=\"active\"\n              >\n                Boards\n              </NavLink>\n            </NavItem>\n            <UncontrolledDropdown nav inNavbar>\n              <DropdownToggle nav caret>\n                {username}\n              </DropdownToggle>\n              <DropdownMenu right>\n                <DropdownItem onClick={logout}>Logout</DropdownItem>\n              </DropdownMenu>\n            </UncontrolledDropdown>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: AppState) => {\n  const { loggedIn, username } = auth;\n  return { loggedIn, username };\n};\n\nconst mapDispatchToProps = {\n  logout,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React from \"react\";\nimport { FormGroup, Label, Input, FormFeedback, InputProps } from \"reactstrap\";\n\nconst TextInput = ({\n  label,\n  type,\n  name,\n  value,\n  onChange,\n  showError,\n  errorMessage,\n  rows,\n  maxLength,\n}: InputProps) => (\n  <FormGroup>\n    <Label>{label}</Label>\n    <Input\n      type={type}\n      name={name}\n      value={value}\n      onChange={onChange}\n      invalid={showError}\n      rows={rows}\n      maxLength={maxLength}\n    />\n    <FormFeedback>{errorMessage}</FormFeedback>\n  </FormGroup>\n);\n\nexport default TextInput;\n","import React from \"react\";\nimport { Button, Modal, ModalBody, ModalFooter, ModalHeader } from \"reactstrap\";\n\ninterface Props {\n  modalOpen: boolean;\n  modalAction: string;\n  modalType: string;\n  submitModal: () => void;\n  closeModal: () => void;\n  deleteAction: () => void;\n  children: React.ReactNode;\n}\n\ninterface States {\n  showDelete: boolean;\n}\n\nclass CrudModal extends React.Component<Props, States> {\n  readonly state: States = {\n    showDelete: false,\n  };\n\n  showDelete = () => {\n    this.setState({ showDelete: true });\n  };\n\n  deleteAction = () => {\n    this.props.deleteAction();\n    this.setState({ showDelete: false });\n  };\n\n  closeDelete = () => {\n    this.setState({ showDelete: false });\n  };\n\n  render() {\n    const {\n      modalOpen,\n      modalAction,\n      modalType,\n      submitModal,\n      closeModal,\n      children,\n    } = this.props;\n\n    return (\n      <div>\n        <Modal isOpen={modalOpen} centered={true}>\n          <ModalHeader toggle={closeModal}>\n            {modalAction} {modalType}\n          </ModalHeader>\n          <ModalBody>{children}</ModalBody>\n          <ModalFooter\n            className={modalAction === \"Edit\" ? \"justify-content-between\" : \"\"}\n          >\n            {modalAction === \"Edit\" && (\n              <Button color=\"primary\" onClick={this.showDelete}>\n                Delete\n              </Button>\n            )}\n            <Button color=\"primary\" onClick={submitModal}>\n              {modalAction === \"Edit\" ? \"Save\" : modalAction}\n            </Button>\n          </ModalFooter>\n        </Modal>\n        <Modal isOpen={this.state.showDelete} centered={true} size=\"sm\">\n          <ModalBody>Are you sure you want to delete?</ModalBody>\n          <ModalFooter centered={true} className=\"justify-content-center\">\n            <Button color=\"primary\" onClick={this.closeDelete}>\n              No\n            </Button>\n            <Button color=\"primary\" onClick={this.deleteAction}>\n              Yes\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default CrudModal;\n","import { store } from \"../redux/store\";\nimport { logout } from \"../redux/actions\";\nconst apiUrl = \"/api/\";\n\nexport const fetchApi = async (\n  endPoint: string,\n  method: string,\n  data: object = {}\n) => {\n  try {\n    const state = store.getState();\n    const authToken = state.auth.token;\n\n    if (authToken == null || authToken === \"\") {\n      store.dispatch(logout());\n      return { status: false, error: \"not logged in\" };\n    }\n    const bodyData =\n      method === \"POST\" || method === \"PUT\"\n        ? { body: JSON.stringify(data) }\n        : {};\n\n    const response = await fetch(apiUrl + endPoint, {\n      method: method,\n      headers: {\n        Accept: \"application/json\",\n        authorization: `Bearer ${authToken}`,\n        \"Content-Type\": \"application/json\",\n      },\n      ...bodyData,\n    });\n\n    // Invalid token, logout user.\n    if (response.status === 401) {\n      store.dispatch(logout());\n      return { status: false, error: \"Not logged\" };\n    }\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n    if (err.error) {\n      return { status: false, error: err.error };\n    }\n    return { status: false, error: \"\" };\n  }\n};\n\nexport const fetchData = async (\n  endPoint: string,\n  method: string,\n  data: object = {}\n) => {\n  try {\n    const bodyData =\n      method === \"POST\" || method === \"PUT\"\n        ? { body: JSON.stringify(data) }\n        : {};\n\n    const response = await fetch(apiUrl + endPoint, {\n      method: method,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n      },\n      ...bodyData,\n    });\n    return await response.json();\n  } catch (err) {\n    console.log(err);\n    if (err.error) {\n      return { status: false, error: err.error };\n    }\n    return { status: false, error: \"\" };\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport BootstrapTable, { RowSelectionType } from \"react-bootstrap-table-next\";\nimport { loadBoards, addBoard, editBoard, deleteBoard } from \"../redux/actions\";\nimport { BoardState } from \"../redux/types\";\nimport { AppState } from \"../redux/reducers\";\nimport Header from \"../components/Header\";\nimport TextInput from \"../components/TextInput\";\nimport CrudModal from \"../components/CrudModal\";\nimport { fetchApi } from \"../lib/api\";\n\ninterface Props {\n  boards: Array<BoardState>;\n  loadBoards: typeof loadBoards;\n  addBoard: typeof addBoard;\n  editBoard: typeof editBoard;\n  deleteBoard: typeof deleteBoard;\n}\n\ninterface States {\n  boardID: string;\n  boardName: string;\n  modalOpen: boolean;\n  modalAction: string;\n  showError: boolean;\n  errorMessage: string;\n}\n\nclass Boards extends React.Component<Props, States> {\n  readonly state: States = {\n    boardID: \"0\",\n    boardName: \"\",\n    modalOpen: false,\n    modalAction: \"\",\n    showError: false,\n    errorMessage: \"\",\n  };\n\n  componentDidMount() {\n    this.loadBoards();\n  }\n\n  loadBoards = async () => {\n    const apiResult = await fetchApi(\"board\", \"GET\");\n\n    if (apiResult.status === true) {\n      const boards = apiResult.boards;\n      this.props.loadBoards(boards);\n    }\n  };\n\n  submitModal = () => {\n    const { modalAction } = this.state;\n\n    if (modalAction === \"Delete\") {\n      this.deleteBoard();\n    } else if (modalAction === \"Edit\") {\n      this.editBoard();\n    } else {\n      this.createBoard();\n    }\n  };\n\n  deleteBoard = async () => {\n    const { boardID } = this.state;\n    const apiResult = await fetchApi(\"board/\" + boardID, \"DELETE\");\n\n    if (apiResult.status === true) {\n      this.props.deleteBoard(boardID);\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  editBoard = async () => {\n    const { boardID, boardName } = this.state;\n\n    if (boardName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const data = {\n      id: boardID,\n      name: boardName,\n    };\n\n    // send to api\n    const apiResult = await fetchApi(\"board/\" + boardID, \"PUT\", data);\n\n    if (apiResult.status === true) {\n      this.props.editBoard(data);\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Board name in use\" });\n  };\n\n  createBoard = async () => {\n    const { boardName } = this.state;\n\n    if (boardName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"board\", \"POST\", {\n      name: boardName,\n    });\n\n    if (apiResult.status === true) {\n      const boardID = apiResult.boardID;\n\n      const data = {\n        id: boardID,\n        name: boardName,\n        taskList: [],\n      };\n\n      this.props.addBoard(data);\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Board name in use\" });\n  };\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const key = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    this.setState<never>({ [key]: value });\n  };\n\n  openCreateModal = () => {\n    this.setState({ modalOpen: true, modalAction: \"Create\" });\n  };\n\n  openEditModal = (row: BoardState) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Edit\",\n      boardID: id,\n      boardName: name,\n    });\n  };\n\n  closeModal = () => {\n    this.setState({\n      modalOpen: false,\n      boardName: \"\",\n      boardID: \"0\",\n      showError: false,\n      errorMessage: \"\",\n    });\n  };\n\n  actionsFormatter = (cell: RowSelectionType, row: BoardState) => {\n    return (\n      <div className=\"btn-actions\">\n        <Button\n          outline\n          color=\"primary\"\n          size=\"sm\"\n          onClick={() => this.openEditModal(row)}\n        >\n          Edit\n        </Button>\n      </div>\n    );\n  };\n\n  render() {\n    const { boardName, modalOpen, modalAction } = this.state;\n    const { boards } = this.props;\n    const columns = [\n      {\n        dataField: \"name\",\n        text: \"Board Name\",\n        sort: true,\n      },\n      {\n        dataField: \"actions\",\n        text: \"Actions\",\n        isDummyField: true,\n        formatter: this.actionsFormatter,\n        headerStyle: () => {\n          return { width: \"130px\" };\n        },\n      },\n    ];\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"section\">\n          <div className=\"d-inline-block mb-2\">\n            <h3>Boards </h3>\n          </div>\n          <Button\n            color=\"success\"\n            className=\"float-right\"\n            onClick={this.openCreateModal}\n          >\n            Create Board\n          </Button>\n          <BootstrapTable\n            bootstrap4\n            keyField=\"id\"\n            data={boards}\n            columns={columns}\n          />\n        </div>\n        <CrudModal\n          modalOpen={modalOpen}\n          modalAction={modalAction}\n          modalType=\"Board\"\n          deleteAction={this.deleteBoard}\n          submitModal={this.submitModal}\n          closeModal={this.closeModal}\n        >\n          {modalAction === \"Delete\" ? (\n            <p>Board: {boardName}</p>\n          ) : (\n            <TextInput\n              name=\"boardName\"\n              label=\"Select Board\"\n              type=\"text\"\n              value={boardName}\n              onChange={this.onChange}\n              showError={this.state.showError}\n              errorMessage={this.state.errorMessage}\n              maxLength={25}\n            />\n          )}\n        </CrudModal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ task }: AppState) => {\n  const { boards } = task;\n  return { boards };\n};\n\nconst mapDispatchToProps = {\n  loadBoards,\n  addBoard,\n  editBoard,\n  deleteBoard,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Boards);\n","import React from \"react\";\nimport { FormGroup, Label, Input } from \"reactstrap\";\n\ninterface OptionTypes {\n  id: string;\n  name: string;\n}\n\ninterface MyProps {\n  name: string;\n  label: string;\n  value: string;\n  selectLabel: string;\n  options: Array<OptionTypes>;\n  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;\n}\n\nconst SelectInput = ({\n  label,\n  name,\n  value,\n  selectLabel,\n  options,\n  onChange,\n}: MyProps) => (\n  <FormGroup>\n    <Label>{label}</Label>\n    <Input\n      type=\"select\"\n      name={name}\n      value={value}\n      onChange={onChange}\n      className=\"pointer\"\n    >\n      <option value=\"0\">{selectLabel}</option>\n      {options.map((row: OptionTypes, index: number) => {\n        return (\n          <option value={row.id} key={index}>\n            {row.name}\n          </option>\n        );\n      })}\n    </Input>\n  </FormGroup>\n);\n\nexport default SelectInput;\n","import React from \"react\";\nimport { Draggable } from \"react-beautiful-dnd\";\n\ninterface MyProps {\n  id: string;\n  name: string;\n  index: number;\n  editTask: () => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst getItemStyle = (isDragging: boolean, draggableStyle: any) => ({\n  position: \"relative\",\n  userSelect: \"none\",\n  padding: `16px 8px`,\n  margin: `0 0 12px 0`,\n  background: \"#FFF\",\n  boxShadow: \"0 1px 1px rgba(0,0,0, .20)\",\n  border: \"1px solid #fff\",\n  ...draggableStyle,\n});\n\nconst TaskItem = ({ id, name, index, editTask }: MyProps) => (\n  <Draggable key={id} draggableId={id} index={index}>\n    {(provided, snapshot) => (\n      <div\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        style={getItemStyle(snapshot.isDragging, provided.draggableProps.style)}\n        onClick={editTask}\n      >\n        <span className=\"btn-span\">{name}</span>\n      </div>\n    )}\n  </Draggable>\n);\n\nexport default TaskItem;\n","import React from \"react\";\nimport { Droppable } from \"react-beautiful-dnd\";\nimport { Button } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport TaskItem from \"./TaskItem\";\nimport { TaskItemState } from \"../redux/types\";\n\ninterface MyProps {\n  name: string;\n  id: string;\n  tasks: Array<TaskItemState>;\n  showEdit: () => void;\n  showAddTask: () => void;\n  showEditTask: (task: TaskItemState) => void;\n}\n\nconst getListStyle = (isDraggingOver: boolean) => ({\n  background: isDraggingOver ? \"lightblue\" : \"#f3f5f7\",\n  borderRadius: \"4px\",\n  border: \"1px solid #eee\",\n  padding: 8,\n  width: 300,\n  minWidth: 300,\n  marginRight: 10,\n  marginBottom: 30,\n});\n\nconst TaskList = ({\n  id,\n  name,\n  tasks,\n  showEdit,\n  showAddTask,\n  showEditTask,\n}: MyProps) => (\n  <Droppable droppableId={id}>\n    {(provided, snapshot) => (\n      <div\n        ref={provided.innerRef}\n        className=\"relative\"\n        style={getListStyle(snapshot.isDraggingOver)}\n        {...provided.droppableProps}\n      >\n        <div className=\"tasklist-header\" onClick={showEdit}>\n          <h4>{name}</h4>\n        </div>\n        <div className=\"task-create-container\" onClick={showAddTask}>\n          <FontAwesomeIcon icon={faPlus} />\n        </div>\n        <div className=\"task-container\">\n          {tasks &&\n            tasks.map((task: TaskItemState, index: number) => (\n              <TaskItem\n                key={index}\n                id={task.id}\n                name={task.name}\n                index={index}\n                editTask={() => showEditTask(task)}\n              />\n            ))}\n          {provided.placeholder}\n        </div>\n      </div>\n    )}\n  </Droppable>\n);\n\nexport default TaskList;\n","export const reorderArray = (\n  list: Array<object>,\n  startIndex: number,\n  endIndex: number\n) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n  return result;\n};\n\nexport const moveArray = (\n  source: Array<object>,\n  destination: Array<object>,\n  startIndex: number,\n  endIndex: number\n) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(startIndex, 1);\n\n  destClone.splice(endIndex, 0, removed);\n\n  const result = { sourceItems: sourceClone, destinationItems: destClone };\n  return result;\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport { DragDropContext, DropResult } from \"react-beautiful-dnd\";\nimport {\n  addList,\n  editList,\n  deleteList,\n  addTask,\n  editTask,\n  deleteTask,\n  loadBoard,\n  loadBoards,\n  moveTask,\n  setCurrentBoard,\n  loginSuccess,\n} from \"../redux/actions\";\nimport {\n  BoardState,\n  AuthState,\n  TaskListState,\n  TaskItemState,\n} from \"../redux/types\";\nimport { AppState } from \"../redux/reducers\";\nimport Header from \"../components/Header\";\nimport SelectInput from \"../components/SelectInput\";\nimport TextInput from \"../components/TextInput\";\nimport TaskList from \"../components/TaskList\";\nimport CrudModal from \"../components/CrudModal\";\nimport { fetchApi } from \"../lib/api\";\nimport { reorderArray, moveArray } from \"../lib/tools\";\n\ninterface Props {\n  currentBoardID: string;\n  currentBoard: BoardState;\n  boards: Array<BoardState>;\n  setCurrentBoard: typeof setCurrentBoard;\n  addList: typeof addList;\n  editList: typeof editList;\n  deleteList: typeof deleteList;\n  addTask: typeof addTask;\n  editTask: typeof editTask;\n  deleteTask: typeof deleteTask;\n  moveTask: typeof moveTask;\n  loadBoard: typeof loadBoard;\n  loadBoards: typeof loadBoards;\n  loginSuccess: typeof loginSuccess;\n}\n\ninterface States {\n  listID: string;\n  listName: string;\n  taskID: string;\n  taskName: string;\n  modalOpen: boolean;\n  modalAction: string;\n  modalType: string;\n  showError: boolean;\n  errorMessage: string;\n}\n\nclass TaskBoard extends React.Component<Props, States> {\n  readonly state: States = {\n    listID: \"0\",\n    listName: \"\",\n    taskID: \"0\",\n    taskName: \"\",\n    modalOpen: false,\n    modalAction: \"\",\n    modalType: \"\",\n    showError: false,\n    errorMessage: \"\",\n  };\n\n  componentDidMount() {\n    this.checkAuth();\n  }\n\n  checkAuth = async () => {\n    const apiResult = await fetchApi(\"auth/verify\", \"GET\");\n\n    if (apiResult.status === true) {\n      const { user, token, boards } = apiResult;\n      const currentBoardID = user.currentBoard ? user.currentBoard : \"0\";\n      const authData: AuthState = {\n        id: user.id,\n        username: user.name,\n        token: token,\n        currentBoardID: currentBoardID,\n        loggedIn: true,\n      };\n      this.props.loginSuccess(authData);\n      this.props.loadBoards(boards);\n      this.loadBoard(currentBoardID);\n      return true;\n    }\n  };\n\n  submitModal = () => {\n    const { modalAction, modalType } = this.state;\n\n    if (modalType === \"Task\") {\n      if (modalAction === \"Edit\") {\n        this.editTask();\n      } else {\n        this.createTask();\n      }\n    } else {\n      if (modalAction === \"Edit\") {\n        this.editList();\n      } else {\n        this.createList();\n      }\n    }\n  };\n\n  deleteList = async () => {\n    const { currentBoardID } = this.props;\n    const { listID } = this.state;\n\n    const apiResult = await fetchApi(\"taskList/\" + listID, \"DELETE\");\n\n    if (apiResult.status === true) {\n      const data = {\n        boardID: currentBoardID,\n        id: listID,\n      };\n      this.props.deleteList(data);\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  editList = async () => {\n    const { currentBoardID } = this.props;\n    const { listID, listName } = this.state;\n\n    if (listName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"taskList/\" + listID, \"PUT\", {\n      name: listName,\n    });\n\n    if (apiResult.status === true) {\n      const data = {\n        id: listID,\n        name: listName,\n        tasks: [],\n      };\n\n      this.props.editList({ boardID: currentBoardID, taskList: data });\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  createList = async () => {\n    const { currentBoardID } = this.props;\n    const { listName } = this.state;\n\n    if (listName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"taskList\", \"POST\", {\n      name: listName,\n      boardID: currentBoardID,\n    });\n\n    if (apiResult.status === true) {\n      const taskListID = apiResult.taskListID;\n\n      const data = {\n        id: taskListID,\n        name: listName,\n        tasks: [],\n      };\n\n      this.props.addList({ boardID: currentBoardID, taskList: data });\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  deleteTask = async () => {\n    const { currentBoardID } = this.props;\n    const { listID, taskID } = this.state;\n\n    const apiResult = await fetchApi(\"task/\" + taskID, \"DELETE\");\n\n    if (apiResult.status === true) {\n      const data = {\n        boardID: currentBoardID,\n        listID: listID,\n        id: taskID,\n      };\n      this.props.deleteTask(data);\n      this.closeModal();\n      return true;\n    }\n\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  editTask = async () => {\n    const { currentBoardID } = this.props;\n    const { listID, taskID, taskName } = this.state;\n\n    if (taskName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"task/\" + taskID, \"PUT\", {\n      name: taskName,\n    });\n\n    if (apiResult.status === true) {\n      const data = {\n        boardID: currentBoardID,\n        listID: listID,\n        id: taskID,\n        name: taskName,\n      };\n\n      this.props.editTask(data);\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  createTask = async () => {\n    const { currentBoardID } = this.props;\n    const { listID, taskName } = this.state;\n\n    if (taskName === \"\") {\n      this.setState({ showError: true, errorMessage: \"Please enter name\" });\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"task\", \"POST\", {\n      name: taskName,\n      listID: listID,\n    });\n\n    if (apiResult.status === true) {\n      const taskID = apiResult.taskID;\n\n      const data = {\n        id: taskID,\n        name: taskName,\n      };\n\n      this.props.addTask({\n        boardID: currentBoardID,\n        listID: listID,\n        task: data,\n      });\n      this.closeModal();\n      return true;\n    }\n    this.setState({ showError: true, errorMessage: \"Please try again\" });\n  };\n\n  openCreateModal = () => {\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Create\",\n      modalType: \"List\",\n    });\n  };\n\n  openCreateTaskModal = (row: TaskListState) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Create\",\n      modalType: \"Task\",\n      listID: id,\n      listName: name,\n    });\n  };\n\n  openEditModal = (row: TaskListState) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Edit\",\n      modalType: \"List\",\n      listID: id,\n      listName: name,\n    });\n  };\n\n  openEditTaskModal = (row: TaskListState, task: TaskItemState) => {\n    const { id, name } = row;\n    this.setState({\n      modalOpen: true,\n      modalAction: \"Edit\",\n      modalType: \"Task\",\n      listID: id,\n      listName: name,\n      taskID: task.id,\n      taskName: task.name,\n    });\n  };\n\n  closeModal = () => {\n    this.setState({\n      modalOpen: false,\n      modalType: \"\",\n      listName: \"\",\n      listID: \"0\",\n      taskID: \"0\",\n      taskName: \"\",\n      showError: false,\n      errorMessage: \"\",\n    });\n  };\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const key = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    this.setState<never>({ [key]: value });\n  };\n\n  onDefaultBoardChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const boardID = event.currentTarget.value;\n    this.props.setCurrentBoard(boardID);\n    this.loadBoard(boardID);\n\n    // update current board\n    fetchApi(\"user/board/\" + boardID, \"GET\");\n  };\n\n  loadBoard = async (boardID: string) => {\n    if (boardID === \"0\") {\n      return false;\n    }\n\n    const apiResult = await fetchApi(\"board/\" + boardID, \"GET\");\n\n    if (apiResult.status === true && apiResult.board) {\n      const board = apiResult.board;\n      this.props.loadBoard(board);\n    }\n  };\n\n  onDragEnd = (result: DropResult) => {\n    const { currentBoardID, currentBoard } = this.props;\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      console.log(\"Dropped outside\");\n      return;\n    }\n\n    const taskLists = currentBoard.taskList;\n    const sourceID = source.droppableId;\n    const destinationID = destination.droppableId;\n    const sourceIndex = source.index;\n    const destinationIndex = destination.index;\n\n    const data = {\n      sourceID,\n      destinationID,\n      sourceIndex,\n      destinationIndex,\n    };\n\n    // same list.\n    if (source.droppableId === destination.droppableId) {\n      // get tasklist.\n      const tasks = getTasks(taskLists, destinationID);\n      // reorder items.\n      const newTasks = reorderArray(tasks, sourceIndex, destinationIndex);\n      // update redux\n      this.props.moveTask({\n        boardID: currentBoardID,\n        id: destinationID,\n        tasks: newTasks,\n      });\n\n      fetchApi(\"taskList/updateOrder\", \"POST\", data);\n      return;\n    }\n\n    const sourceList = getTasks(taskLists, sourceID);\n    const destinationList = getTasks(taskLists, destinationID);\n\n    // new list\n    const moveResult = moveArray(\n      sourceList,\n      destinationList,\n      sourceIndex,\n      destinationIndex\n    );\n\n    const { sourceItems, destinationItems } = moveResult;\n\n    // update redux source items\n    this.props.moveTask({\n      boardID: currentBoardID,\n      id: sourceID,\n      tasks: sourceItems,\n    });\n\n    // update redux destination items\n    this.props.moveTask({\n      boardID: currentBoardID,\n      id: destinationID,\n      tasks: destinationItems,\n    });\n\n    fetchApi(\"taskList/updateOrder\", \"POST\", data);\n  };\n\n  render() {\n    const { boards, currentBoardID, currentBoard } = this.props;\n    const {\n      listName,\n      taskName,\n      modalOpen,\n      modalAction,\n      modalType,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"board-tools\">\n          <div className=\"select-board\">\n            <SelectInput\n              name=\"defaultBoard\"\n              label=\"Board Name\"\n              value={currentBoardID}\n              selectLabel=\"Select Board\"\n              options={boards}\n              onChange={this.onDefaultBoardChange}\n            />\n          </div>\n          {this.props.currentBoardID !== \"0\" && (\n            <Button color=\"success\" onClick={this.openCreateModal}>\n              Create List\n            </Button>\n          )}\n        </div>\n        <div className=\"d-flex ml-2\">\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            {currentBoard &&\n              currentBoard.taskList &&\n              currentBoard.taskList.map(\n                (list: TaskListState, index: number) => {\n                  return (\n                    <TaskList\n                      key={index}\n                      id={list.id}\n                      name={list.name}\n                      tasks={list.tasks}\n                      showEdit={() => this.openEditModal(list)}\n                      showAddTask={() => this.openCreateTaskModal(list)}\n                      showEditTask={(task: TaskItemState) =>\n                        this.openEditTaskModal(list, task)\n                      }\n                    />\n                  );\n                }\n              )}\n          </DragDropContext>\n        </div>\n        <CrudModal\n          modalOpen={modalOpen}\n          modalAction={modalAction}\n          modalType={modalType}\n          deleteAction={\n            modalType === \"List\" ? this.deleteList : this.deleteTask\n          }\n          submitModal={this.submitModal}\n          closeModal={this.closeModal}\n        >\n          <div>\n            {modalType === \"List\" ? (\n              <div>\n                <TextInput\n                  name=\"listName\"\n                  label=\"List Name\"\n                  type=\"text\"\n                  value={listName}\n                  onChange={this.onChange}\n                  showError={this.state.showError}\n                  errorMessage=\"Please enter a name\"\n                  maxLength={25}\n                />\n              </div>\n            ) : (\n              <div>\n                <p>List {listName}</p>\n                <TextInput\n                  name=\"taskName\"\n                  label=\"Task\"\n                  type=\"textarea\"\n                  value={taskName}\n                  onChange={this.onChange}\n                  showError={this.state.showError}\n                  errorMessage={this.state.errorMessage}\n                  rows={3}\n                />\n              </div>\n            )}\n          </div>\n        </CrudModal>\n      </div>\n    );\n  }\n}\n\nconst getTasks = (taskLists: Array<TaskListState>, taskListID: string) => {\n  const row = taskLists.filter(\n    (taskList: TaskListState) => taskList.id === taskListID\n  )[0];\n  const tasks = row == null ? [] : row.tasks;\n  return tasks;\n};\n\nconst getCurrentBoard = (boards: Array<BoardState>, boardID: string) => {\n  const currentBoard = boards.filter(\n    (board: BoardState) => board.id === boardID\n  )[0];\n  return currentBoard;\n};\n\nconst mapStateToProps = ({ task, auth }: AppState) => {\n  const { boards } = task;\n  const { currentBoardID } = auth;\n  const currentBoard = getCurrentBoard(boards, currentBoardID);\n\n  return { boards, currentBoardID, currentBoard };\n};\n\nconst mapDispatchToProps = {\n  addList,\n  editList,\n  deleteList,\n  addTask,\n  editTask,\n  deleteTask,\n  loadBoard,\n  loadBoards,\n  moveTask,\n  setCurrentBoard,\n  loginSuccess,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskBoard);\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Button } from \"reactstrap\";\nimport { loginSuccess } from \"../redux/actions\";\nimport { AuthState } from \"../redux/types\";\nimport { AppState } from \"../redux/reducers\";\nimport TextInput from \"../components/TextInput\";\nimport { fetchData } from \"../lib/api\";\n\ninterface Props {\n  loggedIn: boolean;\n  loginSuccess: typeof loginSuccess;\n}\n\ninterface States {\n  username: string;\n  password: string;\n  showError: boolean;\n  errorInput: string;\n  errorMessage: string;\n}\n\nclass Login extends React.Component<Props, States> {\n  readonly state: States = {\n    username: \"demo\",\n    password: \"demo\",\n    showError: false,\n    errorInput: \"\",\n    errorMessage: \"\",\n  };\n\n  checkLogin = async () => {\n    const { username, password } = this.state;\n\n    if (username === \"\") {\n      this.setState({\n        showError: true,\n        errorInput: \"username\",\n        errorMessage: \"Please enter username\",\n      });\n      return false;\n    }\n    if (password === \"\") {\n      this.setState({\n        showError: true,\n        errorInput: \"password\",\n        errorMessage: \"Please enter password\",\n      });\n      return false;\n    }\n\n    const apiResult = await fetchData(\"auth/login\", \"POST\", {\n      username,\n      password,\n    });\n\n    if (apiResult.status === true) {\n      const { user, token } = apiResult;\n      const authData: AuthState = {\n        id: user.id,\n        username: user.name,\n        token: token,\n        currentBoardID: user.currentBoard ? user.currentBoard : \"0\",\n        loggedIn: true,\n      };\n      this.props.loginSuccess(authData);\n      return true;\n    }\n    this.setState({\n      showError: true,\n      errorInput: \"password\",\n      errorMessage: \"Invalid username or password\",\n    });\n  };\n\n  onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const key = event.currentTarget.name;\n    const value = event.currentTarget.value;\n    this.setState<never>({ [key]: value, showError: false });\n  };\n\n  render() {\n    const { username, password } = this.state;\n    return (\n      <div className=\"login-form\">\n        <h1 className=\"pb-4\">\n          <span className=\"font-weight-bold\">Task Board</span>\n        </h1>\n        <TextInput\n          name=\"username\"\n          label=\"Username\"\n          type=\"text\"\n          value={username}\n          onChange={this.onChange}\n          showError={\n            this.state.errorInput === \"username\" && this.state.showError\n          }\n          errorMessage={this.state.errorMessage}\n        />\n        <TextInput\n          name=\"password\"\n          label=\"Password\"\n          type=\"password\"\n          value={password}\n          onChange={this.onChange}\n          showError={\n            this.state.errorInput === \"password\" && this.state.showError\n          }\n          errorMessage={this.state.errorMessage}\n        />\n        <Button\n          className=\"btn-lg btn-dark btn-block mt-4\"\n          onClick={this.checkLogin}\n        >\n          Login\n        </Button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: AppState) => {\n  const { loggedIn } = auth;\n  return { loggedIn };\n};\n\nconst mapDispatchToProps = {\n  loginSuccess,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from \"react\";\nimport { Route, Redirect, RouteProps } from \"react-router-dom\";\n\ninterface Props extends RouteProps {\n  loggedIn: boolean;\n}\n\nconst LoginRoute = ({ loggedIn, ...props }: Props) =>\n  loggedIn ? <Redirect to=\"/taskBoard\" /> : <Route {...props} />;\n\nexport default LoginRoute;\n","import React from \"react\";\nimport { Route, Redirect, RouteProps } from \"react-router-dom\";\n\ninterface Props extends RouteProps {\n  loggedIn: boolean;\n}\n\nconst ProtectedRoute = ({ loggedIn, ...props }: Props) =>\n  loggedIn ? <Route {...props} /> : <Redirect to=\"/\" />;\n\nexport default ProtectedRoute;\n","import React from \"react\";\nimport { HashRouter, Switch } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Boards from \"./scenes/Boards\";\nimport TaskBoard from \"./scenes/TaskBoard\";\nimport Login from \"./scenes/Login\";\nimport LoginRoute from \"./components/LoginRoute\";\nimport ProtectedRoute from \"./components/ProtectedRoute\";\nimport { AppState } from \"./redux/reducers\";\n\ninterface Props {\n  loggedIn: boolean;\n}\n\nclass Router extends React.Component<Props> {\n  render() {\n    return (\n      <HashRouter>\n        <Switch>\n          <LoginRoute\n            exact\n            path=\"/\"\n            component={Login}\n            loggedIn={this.props.loggedIn}\n          />\n          <ProtectedRoute\n            path=\"/taskBoard\"\n            component={TaskBoard}\n            loggedIn={this.props.loggedIn}\n          />\n          <ProtectedRoute\n            path=\"/boards\"\n            component={Boards}\n            loggedIn={this.props.loggedIn}\n          />\n        </Switch>\n      </HashRouter>\n    );\n  }\n}\n\nconst mapStateToProps = ({ auth }: AppState) => {\n  const { loggedIn } = auth;\n  return { loggedIn };\n};\n\nexport default connect(mapStateToProps, undefined)(Router);\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport { store, persistor } from \"./redux/store\";\nimport Router from \"./Router\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"react-bootstrap-table-next/dist/react-bootstrap-table2.min.css\";\nimport \"./assets/css/App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <Router loggedIn={true} />\n      </PersistGate>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}